{
  "api/Addax.Formats.Tabular.Converters.TabularBase16BinaryConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularBase16BinaryConverter.html",
    "title": "Class TabularBase16BinaryConverter",
    "keywords": "Class TabularBase16BinaryConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts binary data encoded with \"base16\" (\"hex\") encoding from or to a sequence of characters. public class TabularBase16BinaryConverter : TabularConverter<byte[]> Inheritance object TabularConverter<byte[]> TabularBase16BinaryConverter Inherited Members TabularConverter<byte[]>.TryFormat(byte[], Span<char>, IFormatProvider, out int) TabularConverter<byte[]>.TryParse(ReadOnlySpan<char>, IFormatProvider, out byte[]) Constructors TabularBase16BinaryConverter() Initializes a new instance of the TabularBase16BinaryConverter class. public TabularBase16BinaryConverter() Methods TryFormat(byte[]?, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(byte[]? value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value byte[] The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out byte[]?) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out byte[]? value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value byte[] When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularBase64BinaryConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularBase64BinaryConverter.html",
    "title": "Class TabularBase64BinaryConverter",
    "keywords": "Class TabularBase64BinaryConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts binary data encoded with \"base64\" encoding from or to a sequence of characters. public class TabularBase64BinaryConverter : TabularConverter<byte[]> Inheritance object TabularConverter<byte[]> TabularBase64BinaryConverter Inherited Members TabularConverter<byte[]>.TryFormat(byte[], Span<char>, IFormatProvider, out int) TabularConverter<byte[]>.TryParse(ReadOnlySpan<char>, IFormatProvider, out byte[]) Constructors TabularBase64BinaryConverter() Initializes a new instance of the TabularBase64BinaryConverter class. public TabularBase64BinaryConverter() Methods TryFormat(byte[]?, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(byte[]? value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value byte[] The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out byte[]?) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out byte[]? value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value byte[] When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularBigIntegerConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularBigIntegerConverter.html",
    "title": "Class TabularBigIntegerConverter",
    "keywords": "Class TabularBigIntegerConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a BigInteger value from or to a sequence of characters. public class TabularBigIntegerConverter : TabularConverter<BigInteger> Inheritance object TabularConverter<BigInteger> TabularBigIntegerConverter Constructors TabularBigIntegerConverter() Initializes a new instance of the TabularBigIntegerConverter class. public TabularBigIntegerConverter() Methods TryFormat(BigInteger, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(BigInteger value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value BigInteger The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out BigInteger) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out BigInteger value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value BigInteger When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularBooleanConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularBooleanConverter.html",
    "title": "Class TabularBooleanConverter",
    "keywords": "Class TabularBooleanConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a bool value from or to a sequence of characters. public class TabularBooleanConverter : TabularConverter<bool> Inheritance object TabularConverter<bool> TabularBooleanConverter Constructors TabularBooleanConverter() Initializes a new instance of the TabularBooleanConverter class. public TabularBooleanConverter() Methods TryFormat(bool, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(bool value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value bool The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out bool) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out bool value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value bool When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularByteConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularByteConverter.html",
    "title": "Class TabularByteConverter",
    "keywords": "Class TabularByteConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a byte value from or to a sequence of characters. public class TabularByteConverter : TabularConverter<byte> Inheritance object TabularConverter<byte> TabularByteConverter Constructors TabularByteConverter() Initializes a new instance of the TabularByteConverter class. public TabularByteConverter() Methods TryFormat(byte, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(byte value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value byte The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out byte) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out byte value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value byte When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularCharConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularCharConverter.html",
    "title": "Class TabularCharConverter",
    "keywords": "Class TabularCharConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a char value from or to a sequence of characters. public class TabularCharConverter : TabularConverter<char> Inheritance object TabularConverter<char> TabularCharConverter Constructors TabularCharConverter() Initializes a new instance of the TabularCharConverter class. public TabularCharConverter() Methods TryFormat(char, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(char value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value char The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out char) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out char value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value char When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularDateOnlyConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularDateOnlyConverter.html",
    "title": "Class TabularDateOnlyConverter",
    "keywords": "Class TabularDateOnlyConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a DateOnly value from or to a sequence of characters. public class TabularDateOnlyConverter : TabularConverter<DateOnly> Inheritance object TabularConverter<DateOnly> TabularDateOnlyConverter Constructors TabularDateOnlyConverter(string?) Initializes a new instance of the TabularDateOnlyConverter class with the specified format. public TabularDateOnlyConverter(string? format = \"yyyy'-'MM'-'dd\") Parameters format string The format to use for parsing and formatting. Methods TryFormat(DateOnly, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(DateOnly value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value DateOnly The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out DateOnly) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out DateOnly value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value DateOnly When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularDateTimeConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularDateTimeConverter.html",
    "title": "Class TabularDateTimeConverter",
    "keywords": "Class TabularDateTimeConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a DateTime value from or to a sequence of characters. public class TabularDateTimeConverter : TabularConverter<DateTime> Inheritance object TabularConverter<DateTime> TabularDateTimeConverter Constructors TabularDateTimeConverter(string?) Initializes a new instance of the TabularDateTimeConverter class with the specified format. public TabularDateTimeConverter(string? format = \"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK\") Parameters format string The format to use for parsing and formatting. Methods TryFormat(DateTime, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(DateTime value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value DateTime The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out DateTime) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out DateTime value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value DateTime When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularDateTimeOffsetConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularDateTimeOffsetConverter.html",
    "title": "Class TabularDateTimeOffsetConverter",
    "keywords": "Class TabularDateTimeOffsetConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a DateTimeOffset value from or to a sequence of characters. public class TabularDateTimeOffsetConverter : TabularConverter<DateTimeOffset> Inheritance object TabularConverter<DateTimeOffset> TabularDateTimeOffsetConverter Constructors TabularDateTimeOffsetConverter(string?) Initializes a new instance of the TabularDateTimeOffsetConverter class with the specified format. public TabularDateTimeOffsetConverter(string? format = \"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK\") Parameters format string The format to use for parsing and formatting. Methods TryFormat(DateTimeOffset, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(DateTimeOffset value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value DateTimeOffset The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out DateTimeOffset) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out DateTimeOffset value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value DateTimeOffset When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularDecimalConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularDecimalConverter.html",
    "title": "Class TabularDecimalConverter",
    "keywords": "Class TabularDecimalConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a decimal value from or to a sequence of characters. public class TabularDecimalConverter : TabularConverter<decimal> Inheritance object TabularConverter<decimal> TabularDecimalConverter Constructors TabularDecimalConverter() Initializes a new instance of the TabularDecimalConverter class. public TabularDecimalConverter() Methods TryFormat(decimal, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(decimal value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value decimal The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out decimal) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out decimal value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value decimal When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularDoubleConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularDoubleConverter.html",
    "title": "Class TabularDoubleConverter",
    "keywords": "Class TabularDoubleConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a double value from or to a sequence of characters. public class TabularDoubleConverter : TabularConverter<double> Inheritance object TabularConverter<double> TabularDoubleConverter Constructors TabularDoubleConverter() Initializes a new instance of the TabularDoubleConverter class. public TabularDoubleConverter() Methods TryFormat(double, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(double value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value double The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out double) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out double value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value double When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularGuidConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularGuidConverter.html",
    "title": "Class TabularGuidConverter",
    "keywords": "Class TabularGuidConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a Guid value from or to a sequence of characters. public class TabularGuidConverter : TabularConverter<Guid> Inheritance object TabularConverter<Guid> TabularGuidConverter Constructors TabularGuidConverter() Initializes a new instance of the TabularGuidConverter class. public TabularGuidConverter() Methods TryFormat(Guid, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(Guid value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value Guid The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out Guid) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out Guid value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value Guid When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularHalfConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularHalfConverter.html",
    "title": "Class TabularHalfConverter",
    "keywords": "Class TabularHalfConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a Half value from or to a sequence of characters. public class TabularHalfConverter : TabularConverter<Half> Inheritance object TabularConverter<Half> TabularHalfConverter Constructors TabularHalfConverter() Initializes a new instance of the TabularHalfConverter class. public TabularHalfConverter() Methods TryFormat(Half, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(Half value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value Half The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out Half) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out Half value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value Half When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularInt128Converter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularInt128Converter.html",
    "title": "Class TabularInt128Converter",
    "keywords": "Class TabularInt128Converter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a Int128 value from or to a sequence of characters. public class TabularInt128Converter : TabularConverter<Int128> Inheritance object TabularConverter<Int128> TabularInt128Converter Constructors TabularInt128Converter() Initializes a new instance of the TabularInt128Converter class. public TabularInt128Converter() Methods TryFormat(Int128, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(Int128 value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value Int128 The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out Int128) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out Int128 value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value Int128 When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularInt16Converter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularInt16Converter.html",
    "title": "Class TabularInt16Converter",
    "keywords": "Class TabularInt16Converter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a short value from or to a sequence of characters. public class TabularInt16Converter : TabularConverter<short> Inheritance object TabularConverter<short> TabularInt16Converter Constructors TabularInt16Converter() Initializes a new instance of the TabularInt16Converter class. public TabularInt16Converter() Methods TryFormat(short, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(short value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value short The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out short) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out short value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value short When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularInt32Converter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularInt32Converter.html",
    "title": "Class TabularInt32Converter",
    "keywords": "Class TabularInt32Converter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a int value from or to a sequence of characters. public class TabularInt32Converter : TabularConverter<int> Inheritance object TabularConverter<int> TabularInt32Converter Constructors TabularInt32Converter() Initializes a new instance of the TabularInt32Converter class. public TabularInt32Converter() Methods TryFormat(int, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(int value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value int The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out int) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out int value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value int When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularInt64Converter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularInt64Converter.html",
    "title": "Class TabularInt64Converter",
    "keywords": "Class TabularInt64Converter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a long value from or to a sequence of characters. public class TabularInt64Converter : TabularConverter<long> Inheritance object TabularConverter<long> TabularInt64Converter Constructors TabularInt64Converter() Initializes a new instance of the TabularInt64Converter class. public TabularInt64Converter() Methods TryFormat(long, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(long value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value long The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out long) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out long value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value long When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularSByteConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularSByteConverter.html",
    "title": "Class TabularSByteConverter",
    "keywords": "Class TabularSByteConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a sbyte value from or to a sequence of characters. [CLSCompliant(false)] public class TabularSByteConverter : TabularConverter<sbyte> Inheritance object TabularConverter<sbyte> TabularSByteConverter Constructors TabularSByteConverter() Initializes a new instance of the TabularSByteConverter class. public TabularSByteConverter() Methods TryFormat(sbyte, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(sbyte value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value sbyte The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out sbyte) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out sbyte value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value sbyte When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularSingleConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularSingleConverter.html",
    "title": "Class TabularSingleConverter",
    "keywords": "Class TabularSingleConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a float value from or to a sequence of characters. public class TabularSingleConverter : TabularConverter<float> Inheritance object TabularConverter<float> TabularSingleConverter Constructors TabularSingleConverter() Initializes a new instance of the TabularSingleConverter class. public TabularSingleConverter() Methods TryFormat(float, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(float value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value float The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out float) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out float value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value float When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularTimeOnlyConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularTimeOnlyConverter.html",
    "title": "Class TabularTimeOnlyConverter",
    "keywords": "Class TabularTimeOnlyConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a TimeOnly value from or to a sequence of characters. public class TabularTimeOnlyConverter : TabularConverter<TimeOnly> Inheritance object TabularConverter<TimeOnly> TabularTimeOnlyConverter Constructors TabularTimeOnlyConverter(string?) Initializes a new instance of the TabularTimeOnlyConverter class with the specified format. public TabularTimeOnlyConverter(string? format = \"HH':'mm':'ss.FFFFFFF\") Parameters format string The format to use for parsing and formatting. Methods TryFormat(TimeOnly, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(TimeOnly value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value TimeOnly The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out TimeOnly) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out TimeOnly value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value TimeOnly When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularTimeSpanConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularTimeSpanConverter.html",
    "title": "Class TabularTimeSpanConverter",
    "keywords": "Class TabularTimeSpanConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a TimeSpan value from or to a sequence of characters. public class TabularTimeSpanConverter : TabularConverter<TimeSpan> Inheritance object TabularConverter<TimeSpan> TabularTimeSpanConverter Constructors TabularTimeSpanConverter() Initializes a new instance of the TabularTimeSpanConverter class. public TabularTimeSpanConverter() Methods TryFormat(TimeSpan, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(TimeSpan value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value TimeSpan The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out TimeSpan) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out TimeSpan value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value TimeSpan When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularUInt128Converter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularUInt128Converter.html",
    "title": "Class TabularUInt128Converter",
    "keywords": "Class TabularUInt128Converter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a UInt128 value from or to a sequence of characters. [CLSCompliant(false)] public class TabularUInt128Converter : TabularConverter<UInt128> Inheritance object TabularConverter<UInt128> TabularUInt128Converter Constructors TabularUInt128Converter() Initializes a new instance of the TabularUInt128Converter class. public TabularUInt128Converter() Methods TryFormat(UInt128, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(UInt128 value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value UInt128 The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out UInt128) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out UInt128 value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value UInt128 When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularUInt16Converter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularUInt16Converter.html",
    "title": "Class TabularUInt16Converter",
    "keywords": "Class TabularUInt16Converter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a ushort value from or to a sequence of characters. [CLSCompliant(false)] public class TabularUInt16Converter : TabularConverter<ushort> Inheritance object TabularConverter<ushort> TabularUInt16Converter Constructors TabularUInt16Converter() Initializes a new instance of the TabularUInt16Converter class. public TabularUInt16Converter() Methods TryFormat(ushort, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(ushort value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value ushort The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out ushort) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out ushort value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value ushort When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularUInt32Converter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularUInt32Converter.html",
    "title": "Class TabularUInt32Converter",
    "keywords": "Class TabularUInt32Converter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a uint value from or to a sequence of characters. [CLSCompliant(false)] public class TabularUInt32Converter : TabularConverter<uint> Inheritance object TabularConverter<uint> TabularUInt32Converter Constructors TabularUInt32Converter() Initializes a new instance of the TabularUInt32Converter class. public TabularUInt32Converter() Methods TryFormat(uint, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(uint value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value uint The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out uint) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out uint value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value uint When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularUInt64Converter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularUInt64Converter.html",
    "title": "Class TabularUInt64Converter",
    "keywords": "Class TabularUInt64Converter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a ulong value from or to a sequence of characters. [CLSCompliant(false)] public class TabularUInt64Converter : TabularConverter<ulong> Inheritance object TabularConverter<ulong> TabularUInt64Converter Constructors TabularUInt64Converter() Initializes a new instance of the TabularUInt64Converter class. public TabularUInt64Converter() Methods TryFormat(ulong, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(ulong value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value ulong The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out ulong) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out ulong value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value ulong When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.TabularUriConverter.html": {
    "href": "api/Addax.Formats.Tabular.Converters.TabularUriConverter.html",
    "title": "Class TabularUriConverter",
    "keywords": "Class TabularUriConverter Namespace Addax.Formats.Tabular.Converters Assembly Addax.Formats.Tabular.dll Converts a System.Uri instance from or to a sequence of characters. public class TabularUriConverter : TabularConverter<Uri> Inheritance object TabularConverter<Uri> TabularUriConverter Constructors TabularUriConverter() Initializes a new instance of the TabularUriConverter class. public TabularUriConverter() Methods TryFormat(Uri?, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public override bool TryFormat(Uri? value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value Uri The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out Uri?) When overridden in a derived class, tries to parse the sequence of characters into a value. public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out Uri? value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value Uri When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.Converters.html": {
    "href": "api/Addax.Formats.Tabular.Converters.html",
    "title": "Namespace Addax.Formats.Tabular.Converters",
    "keywords": "Namespace Addax.Formats.Tabular.Converters Classes TabularBase16BinaryConverter Converts binary data encoded with \"base16\" (\"hex\") encoding from or to a sequence of characters. TabularBase64BinaryConverter Converts binary data encoded with \"base64\" encoding from or to a sequence of characters. TabularBigIntegerConverter Converts a BigInteger value from or to a sequence of characters. TabularBooleanConverter Converts a bool value from or to a sequence of characters. TabularByteConverter Converts a byte value from or to a sequence of characters. TabularCharConverter Converts a char value from or to a sequence of characters. TabularDateOnlyConverter Converts a DateOnly value from or to a sequence of characters. TabularDateTimeConverter Converts a DateTime value from or to a sequence of characters. TabularDateTimeOffsetConverter Converts a DateTimeOffset value from or to a sequence of characters. TabularDecimalConverter Converts a decimal value from or to a sequence of characters. TabularDoubleConverter Converts a double value from or to a sequence of characters. TabularGuidConverter Converts a Guid value from or to a sequence of characters. TabularHalfConverter Converts a Half value from or to a sequence of characters. TabularInt128Converter Converts a Int128 value from or to a sequence of characters. TabularInt16Converter Converts a short value from or to a sequence of characters. TabularInt32Converter Converts a int value from or to a sequence of characters. TabularInt64Converter Converts a long value from or to a sequence of characters. TabularSByteConverter Converts a sbyte value from or to a sequence of characters. TabularSingleConverter Converts a float value from or to a sequence of characters. TabularTimeOnlyConverter Converts a TimeOnly value from or to a sequence of characters. TabularTimeSpanConverter Converts a TimeSpan value from or to a sequence of characters. TabularUInt128Converter Converts a UInt128 value from or to a sequence of characters. TabularUInt16Converter Converts a ushort value from or to a sequence of characters. TabularUInt32Converter Converts a uint value from or to a sequence of characters. TabularUInt64Converter Converts a ulong value from or to a sequence of characters. TabularUriConverter Converts a System.Uri instance from or to a sequence of characters."
  },
  "api/Addax.Formats.Tabular.TabularContentException.html": {
    "href": "api/Addax.Formats.Tabular.TabularContentException.html",
    "title": "Class TabularContentException",
    "keywords": "Class TabularContentException Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll The exception that is thrown when tabular data is invalid. public class TabularContentException : Exception Inheritance object Exception TabularContentException Constructors TabularContentException() Initializes a new instance of the TabularContentException class. public TabularContentException() TabularContentException(string?) Initializes a new instance of the TabularContentException class with the specified error message. public TabularContentException(string? message) Parameters message string The message that describes the error. TabularContentException(string?, Exception?) Initializes a new instance of the TabularContentException class with the specified error message and a reference to the inner exception that is the cause of this exception. public TabularContentException(string? message, Exception? innerException) Parameters message string The message that describes the error. innerException Exception The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "api/Addax.Formats.Tabular.TabularConverter-1.html": {
    "href": "api/Addax.Formats.Tabular.TabularConverter-1.html",
    "title": "Class TabularConverter<T>",
    "keywords": "Class TabularConverter<T> Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Defines the core behavior of converting a value from or to a sequence of characters and provides a base for derived classes. public abstract class TabularConverter<T> Type Parameters T The type of value handled by the converter. Inheritance object TabularConverter<T> Derived TabularBase16BinaryConverter TabularBase64BinaryConverter TabularBigIntegerConverter TabularBooleanConverter TabularByteConverter TabularCharConverter TabularDateOnlyConverter TabularDateTimeConverter TabularDateTimeOffsetConverter TabularDecimalConverter TabularDoubleConverter TabularGuidConverter TabularHalfConverter TabularInt128Converter TabularInt16Converter TabularInt32Converter TabularInt64Converter TabularSByteConverter TabularSingleConverter TabularTimeOnlyConverter TabularTimeSpanConverter TabularUInt128Converter TabularUInt16Converter TabularUInt32Converter TabularUInt64Converter TabularUriConverter Constructors TabularConverter() Initializes a new instance of the TabularConverter<T> class. protected TabularConverter() Methods TryFormat(T?, Span<char>, IFormatProvider?, out int) When overridden in a derived class, tries to format the value into a sequence of characters. public virtual bool TryFormat(T? value, Span<char> destination, IFormatProvider? provider, out int charsWritten) Parameters value T The value to format. destination Span<char> The buffer to write the value to. provider IFormatProvider An object that supplies culture-specific formatting information. charsWritten int When this method returns, contains an integer that is the number of characters that were written in destination. This parameter is treated as uninitialized. Returns bool true if value was successfully formatted; otherwise, false. Remarks Throws a NotSupportedException exception by default. TryParse(ReadOnlySpan<char>, IFormatProvider?, out T?) When overridden in a derived class, tries to parse the sequence of characters into a value. public virtual bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out T? value) Parameters source ReadOnlySpan<char> The buffer to read a value from. provider IFormatProvider An object that supplies culture-specific formatting information. value T When this method returns, contains a value that is the result of successfully parsing source, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if source was successfully parsed; otherwise, false. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.TabularConverterAttribute.html": {
    "href": "api/Addax.Formats.Tabular.TabularConverterAttribute.html",
    "title": "Class TabularConverterAttribute",
    "keywords": "Class TabularConverterAttribute Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Specifies the type of a tabular value converter. This class cannot be inherited. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class TabularConverterAttribute : Attribute Inheritance object Attribute TabularConverterAttribute Constructors TabularConverterAttribute(Type) Initializes a new instance of the TabularConverterAttribute class with the specified converter type. public TabularConverterAttribute(Type converterType) Parameters converterType Type The type of the converter. Must be derived from the TabularConverter<T> class and have an accessible parameterless constructor."
  },
  "api/Addax.Formats.Tabular.TabularDialect.html": {
    "href": "api/Addax.Formats.Tabular.TabularDialect.html",
    "title": "Class TabularDialect",
    "keywords": "Class TabularDialect Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Specifies how to read and write tabular data. This class cannot be inherited. public sealed class TabularDialect Inheritance object TabularDialect Constructors TabularDialect(string, char, char) Initializes a new instance of the TabularDialect class with specified tokens. public TabularDialect(string lineTerminator, char delimiter, char quoteSymbol) Parameters lineTerminator string The character sequence that is used to separate records. Must have one or two distinct characters. delimiter char The character that is used to separate fields. Must differ from line terminator characters. quoteSymbol char The character that is used to surround an escaped field and escape itself within an escaped field. Must differ from line terminator and delimiter characters. Exceptions ArgumentException A token value is not valid for this dialect. ArgumentNullException lineTerminator is null. TabularDialect(string, char, char, char) Initializes a new instance of the TabularDialect class with specified tokens. public TabularDialect(string lineTerminator, char delimiter, char quoteSymbol, char escapeSymbol) Parameters lineTerminator string The character sequence that is used to separate records. Must have one or two distinct characters. delimiter char The character that is used to separate fields. Must differ from line terminator characters. quoteSymbol char The character that is used to surround an escaped field. Must differ from line terminator and delimiter characters. escapeSymbol char The character that is used to escape the quote symbol and itself within an escaped field. Must differ from line terminator and delimiter characters. Exceptions ArgumentException A token value is not valid for this dialect. ArgumentNullException lineTerminator is null. TabularDialect(string, char, char, char, char) Initializes a new instance of the TabularDialect class with specified tokens. public TabularDialect(string lineTerminator, char delimiter, char quoteSymbol, char escapeSymbol, char annotationPrefix) Parameters lineTerminator string The character sequence that is used to separate records. Must have one or two distinct characters. delimiter char The character that is used to separate fields. Must differ from line terminator characters. quoteSymbol char The character that is used to surround an escaped field. Must differ from line terminator and delimiter characters. escapeSymbol char The character that is used to escape the quote symbol and itself within an escaped field. Must differ from line terminator and delimiter characters. annotationPrefix char The character that is used at the beginning of a record to indicate that the record is an annotation. Must differ from line terminator, delimiter, quote, and escape characters. Exceptions ArgumentException A token value is not valid for this dialect. ArgumentNullException lineTerminator is null. Properties AnnotationPrefix Gets the character that is used at the beginning of a record to indicate that the record is an annotation. public char? AnnotationPrefix { get; } Property Value char? A UTF-16 code unit or null, if not set. Delimiter Gets the character that is used to separate fields. public char Delimiter { get; } Property Value char A UTF-16 code unit. EscapeSymbol Gets the character that is used to escape the quote symbol and itself within an escaped field. public char EscapeSymbol { get; } Property Value char A UTF-16 code unit. Equals to QuoteSymbol, if not set. LineTerminator Gets the character sequence that is used to separate records. public string LineTerminator { get; } Property Value string A strings that has one or two UTF-16 code units. QuoteSymbol Gets the character that is used to surround an escaped field. public char QuoteSymbol { get; } Property Value char A UTF-16 code unit."
  },
  "api/Addax.Formats.Tabular.TabularFieldNameAttribute.html": {
    "href": "api/Addax.Formats.Tabular.TabularFieldNameAttribute.html",
    "title": "Class TabularFieldNameAttribute",
    "keywords": "Class TabularFieldNameAttribute Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Specifies the name of a tabular field. This class cannot be inherited. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class TabularFieldNameAttribute : Attribute Inheritance object Attribute TabularFieldNameAttribute Constructors TabularFieldNameAttribute(string) Initializes a new instance of the TabularFieldNameAttribute class with the specified name. public TabularFieldNameAttribute(string name) Parameters name string The name of the field."
  },
  "api/Addax.Formats.Tabular.TabularFieldOrderAttribute.html": {
    "href": "api/Addax.Formats.Tabular.TabularFieldOrderAttribute.html",
    "title": "Class TabularFieldOrderAttribute",
    "keywords": "Class TabularFieldOrderAttribute Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Specifies the order of a tabular field. This class cannot be inherited. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class TabularFieldOrderAttribute : Attribute Inheritance object Attribute TabularFieldOrderAttribute Constructors TabularFieldOrderAttribute(int) Initializes a new instance of the TabularFieldOrderAttribute class with the specified order. public TabularFieldOrderAttribute(int order) Parameters order int The order of the field. Must be greater than or equal to zero, must be unique within the record type."
  },
  "api/Addax.Formats.Tabular.TabularFieldType.html": {
    "href": "api/Addax.Formats.Tabular.TabularFieldType.html",
    "title": "Enum TabularFieldType",
    "keywords": "Enum TabularFieldType Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Specifies the type of a tabular field. public enum TabularFieldType Fields Annotation = 2 An annotation. None = 0 Indicates that the field is not defined. Value = 1 A value."
  },
  "api/Addax.Formats.Tabular.TabularHandler-1.html": {
    "href": "api/Addax.Formats.Tabular.TabularHandler-1.html",
    "title": "Class TabularHandler<T>",
    "keywords": "Class TabularHandler<T> Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Defines the core behavior of reading an object from or writing an object to a tabular record and provides a base for derived classes. public abstract class TabularHandler<T> where T : notnull Type Parameters T The type of object handled by the handler. Inheritance object TabularHandler<T> Constructors TabularHandler() Initializes a new instance of the TabularHandler<T> class. protected TabularHandler() Properties Header Gets the names of the record fields. public virtual IEnumerable<string?>? Header { get; } Property Value IEnumerable<string> An collection of strings or null. Methods Read(TabularReader) When overridden in a derived class, reads the next record using the specified reader. public virtual TabularRecord<T> Read(TabularReader reader) Parameters reader TabularReader The reader to read with. Returns TabularRecord<T> A container that may or may not have a record. Remarks Throws a NotSupportedException exception by default. ReadAsync(TabularReader, CancellationToken) When overridden in a derived class, asynchronously reads the next record using the specified reader. public virtual ValueTask<TabularRecord<T>> ReadAsync(TabularReader reader, CancellationToken cancellationToken) Parameters reader TabularReader The reader to read with. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask<TabularRecord<T>> A task object that, when awaited, produces a container that may or may not have a record. Remarks Throws a NotSupportedException exception by default. Write(TabularWriter, T) When overridden in a derived class, writes the next record using the specified writer. public virtual void Write(TabularWriter writer, T record) Parameters writer TabularWriter The writer to write with. record T The object to write. Remarks Throws a NotSupportedException exception by default. WriteAsync(TabularWriter, T, CancellationToken) When overridden in a derived class, asynchronously writes the next record using the specified writer. public virtual ValueTask WriteAsync(TabularWriter writer, T record, CancellationToken cancellationToken) Parameters writer TabularWriter The writer to write with. record T The object to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks Throws a NotSupportedException exception by default."
  },
  "api/Addax.Formats.Tabular.TabularOptions.html": {
    "href": "api/Addax.Formats.Tabular.TabularOptions.html",
    "title": "Class TabularOptions",
    "keywords": "Class TabularOptions Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Specifies options to control the behavior of reading and writing tabular data. This class cannot be inherited. public sealed class TabularOptions Inheritance object TabularOptions Constructors TabularOptions() Initializes a new instance of the TabularOptions class. public TabularOptions() Properties BufferSize Gets or sets the minimum size of the buffer in bytes for reading from and writing to a stream. public int BufferSize { get; set; } Property Value int A 32-bit signed integer. Must be greater than zero and less than or equal to MaxLength. The default is 16384. Encoding Gets or sets the character encoding for reading from and writing to a stream. public Encoding? Encoding { get; set; } Property Value Encoding An Encoding instance or null to use the default UTF-8 encoding without byte order mark (BOM). The default is null. FormatProvider Gets or sets the object that supplies culture-specific formatting information when reading and writing fields as typed values. public IFormatProvider? FormatProvider { get; set; } Property Value IFormatProvider An IFormatProvider object or null to use the default culture-independent provider. The default is null. LeaveOpen Gets or sets a value that indicates whether a stream should stay open after a reader or writer is disposed. public bool LeaveOpen { get; set; } Property Value bool true to leave a stream open after a reader or writer is disposed; otherwise, false. The default is false. StringFactory Gets or set the factory that creates string instances from character sequences when reading fields as strings. public TabularStringFactory? StringFactory { get; set; } Property Value TabularStringFactory A TabularStringFactory instance or null to use the default factory, which returns Empty or creates a new string instance. The default is null. TrimWhitespace Gets or sets a value that indicates whether leading and trailing white-space characters should be removed when reading and writing fields as strings. public bool TrimWhitespace { get; set; } Property Value bool true to remove leading and trailing white-space characters; otherwise, false. The default is false."
  },
  "api/Addax.Formats.Tabular.TabularPositionType.html": {
    "href": "api/Addax.Formats.Tabular.TabularPositionType.html",
    "title": "Enum TabularPositionType",
    "keywords": "Enum TabularPositionType Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Specifies the type of a position in tabular data. public enum TabularPositionType Fields Delimiter = 2 A delimiter between tabular fields. EndOfRecord = 3 The end of a tabular record. EndOfStream = 4 The end of a tabular stream. StartOfRecord = 1 The start of a tabular record. StartOfStream = 0 The start of a tabular stream."
  },
  "api/Addax.Formats.Tabular.TabularReader-1.html": {
    "href": "api/Addax.Formats.Tabular.TabularReader-1.html",
    "title": "Class TabularReader<T>",
    "keywords": "Class TabularReader<T> Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Provides forward-only, read-only access to tabular data records. This class cannot be inherited. public sealed class TabularReader<T> : IDisposable, IAsyncDisposable where T : notnull Type Parameters T The type of an object that represents a record. Inheritance object TabularReader<T> Implements IDisposable IAsyncDisposable Constructors TabularReader(Stream, TabularDialect, TabularOptions?, TabularHandler<T>?) Initializes a new instance of the TabularReader<T> class for the specified stream using the provided dialect, options, and record handler. public TabularReader(Stream stream, TabularDialect dialect, TabularOptions? options = null, TabularHandler<T>? handler = null) Parameters stream Stream The stream to read from. dialect TabularDialect The dialect to use for reading. options TabularOptions The options to control the behavior during reading. handler TabularHandler<T> The handler to read a T instance from a record. Exceptions ArgumentException stream does not support reading. ArgumentNullException stream or dialect is null. InvalidOperationException The record handler is not specified and cannot be found in the registry. Properties BytesConsumed Gets the number of bytes consumed so far. public long BytesConsumed { get; } Property Value long A non-negative 64-bit signed integer. Remarks Might be less than the number of bytes read from the underlying stream. CurrentRecord Gets the last read record that is represented as T. public T CurrentRecord { get; } Property Value T A T instance. An exception is thrown if the current record is not set. Exceptions InvalidOperationException The current record is not set. CurrentRecordRef Gets a reference to the last read record that is represented as T. public ref readonly T CurrentRecordRef { get; } Property Value T A read-only reference to a T instance. An exception is thrown if the current record is not set. Exceptions InvalidOperationException The current record is not set. RecordsRead Gets the number of records read so far. public long RecordsRead { get; } Property Value long A non-negative 64-bit signed integer. Methods Dispose() Releases the resources used by the current instance of the TabularReader<T> class. public void Dispose() DisposeAsync() Asynchronously releases the resources used by the current instance of the TabularReader<T> class. public ValueTask DisposeAsync() Returns ValueTask A task object. TryReadRecord() Tries to read the next record that can be represented as T. public bool TryReadRecord() Returns bool true if the record was successfully read; otherwise, false. Remarks If the record handler defines a header, the first record will be automatically skipped. Exceptions TabularContentException An unexpected character or end of stream was encountered. TryReadRecordAsync(CancellationToken) Asynchronously reads the next record that can be represented as T. public ValueTask<bool> TryReadRecordAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask<bool> A task object that, when awaited, produces true if the record was successfully read; otherwise, false. Remarks If the record handler defines a header, the first record will be automatically skipped. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. TabularContentException An unexpected character or end of stream was encountered. This exception is stored into the returned task. TrySkipRecord() Tries to advance the reader to the next record. public bool TrySkipRecord() Returns bool true if the reader was successfully advanced; otherwise, false. Exceptions TabularContentException An unexpected character or end of stream was encountered. TrySkipRecordAsync(CancellationToken) Asynchronously tries to advance the reader to the next record. public ValueTask<bool> TrySkipRecordAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask<bool> A task object that, when awaited, produces true if the reader was successfully advanced; otherwise, false. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. TabularContentException An unexpected character or end of stream was encountered. This exception is stored into the returned task."
  },
  "api/Addax.Formats.Tabular.TabularReader.html": {
    "href": "api/Addax.Formats.Tabular.TabularReader.html",
    "title": "Class TabularReader",
    "keywords": "Class TabularReader Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Provides forward-only, read-only access to tabular data fields. This class cannot be inherited. public sealed class TabularReader : IDisposable, IAsyncDisposable Inheritance object TabularReader Implements IDisposable IAsyncDisposable Constructors TabularReader(Stream, TabularDialect, TabularOptions?) Initializes a new instance of the TabularReader class for the specified stream using the provided dialect and options. public TabularReader(Stream stream, TabularDialect dialect, TabularOptions? options = null) Parameters stream Stream The stream to read from. dialect TabularDialect The dialect to use for reading. options TabularOptions The options to control the behavior during reading. Exceptions ArgumentException stream does not support reading. ArgumentNullException stream or dialect is null. Properties BytesConsumed Gets the number of bytes consumed so far. public long BytesConsumed { get; } Property Value long A non-negative 64-bit signed integer. Remarks Might be less than the number of bytes read from the underlying stream. CurrentField Gets the last read field as a sequence of characters. public ReadOnlyMemory<char> CurrentField { get; } Property Value ReadOnlyMemory<char> A read-only region of memory. CurrentFieldType Gets the type of the last consumed field. public TabularFieldType CurrentFieldType { get; } Property Value TabularFieldType A field type enumeration value. CurrentPositionType Gets the type of the current reader position. public TabularPositionType CurrentPositionType { get; } Property Value TabularPositionType A position type enumeration value. FieldsRead Gets the number of fields read from the current record so far. public long FieldsRead { get; } Property Value long A non-negative 64-bit signed integer. RecordsRead Gets the number of records read so far. public long RecordsRead { get; } Property Value long A non-negative 64-bit signed integer. Methods Dispose() Releases the resources used by the current instance of the TabularReader class. public void Dispose() DisposeAsync() Asynchronously releases the resources used by the current instance of the TabularReader class. public ValueTask DisposeAsync() Returns ValueTask A task object. GetBase16Binary() Parses the current field as binary data encoded with \"base16\" (\"hex\") encoding. public byte[] GetBase16Binary() Returns byte[] An array of bytes. Remarks The field must be formatted according to the RFC 4648. Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as an array of bytes using \"base16\" (\"hex\") encoding. GetBase64Binary() Parses the current field as binary data encoded with \"base64\" encoding. public byte[] GetBase64Binary() Returns byte[] An array of bytes. Remarks The field must be formatted according to the RFC 4648. Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as an array of bytes using \"base64\" encoding. GetBigInteger() Parses the current field as BigInteger. public BigInteger GetBigInteger() Returns BigInteger A BigInteger value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as a BigInteger value. GetBoolean() Parses the current field as bool. public bool GetBoolean() Returns bool A bool value. Remarks The field must be represented as one of the literals: \"false\", \"true\", \"0\", \"1\". Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as a bool value. GetByte() Parses the current field as byte. public byte GetByte() Returns byte A byte value. Remarks Leading and trailing white-space characters, percent sign are allowed. Exceptions FormatException The current field cannot be parsed as a byte value. GetChar() Parses the current field as char. public char GetChar() Returns char A char value. Remarks The field must be represented as one UTF-16 code unit. Exceptions FormatException The current field cannot be parsed as a char value. GetDateOnly() Parses the current field as DateOnly. public DateOnly GetDateOnly() Returns DateOnly A DateOnly value. Remarks The field must be formatted according to the RFC 3339. Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as a DateOnly value. GetDateTime() Parses the current field as DateTime. public DateTime GetDateTime() Returns DateTime A DateTime value. Remarks The field must be formatted according to the RFC 3339. Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as a DateTime value. GetDateTimeOffset() Parses the current field as DateTimeOffset. public DateTimeOffset GetDateTimeOffset() Returns DateTimeOffset A DateTimeOffset value. Remarks The field must be formatted according to the RFC 3339. Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as a DateTimeOffset value. GetDecimal() Parses the current field as decimal. public decimal GetDecimal() Returns decimal A decimal value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as a decimal value. GetDouble() Parses the current field as double. public double GetDouble() Returns double A double value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as a double value. GetGuid() Parses the current field as Guid. public Guid GetGuid() Returns Guid A Guid value. Remarks The field must be formatted according to the RFC 4122. Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as a Guid value. GetHalf() Parses the current field as Half. public Half GetHalf() Returns Half A Half value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as a Half value. GetInt128() Parses the current field as an Int128. public Int128 GetInt128() Returns Int128 A Int128 value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as an Int128 value. GetInt16() Parses the current field as short. public short GetInt16() Returns short A short value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as a short value. GetInt32() Parses the current field as an int. public int GetInt32() Returns int A int value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as an int value. GetInt64() Parses the current field as long. public long GetInt64() Returns long A long value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as a long value. GetSByte() Parses the current field as sbyte. [CLSCompliant(false)] public sbyte GetSByte() Returns sbyte A sbyte value. Remarks Leading and trailing white-space characters, percent sign are allowed. Exceptions FormatException The current field cannot be parsed as a sbyte value. GetSingle() Parses the current field as float. public float GetSingle() Returns float A float value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as a float value. GetString() Transcodes the current field as string. public string GetString() Returns string A string instance. Exceptions FormatException The current field cannot be transcoded as string. GetTimeOnly() Parses the current field as TimeOnly. public TimeOnly GetTimeOnly() Returns TimeOnly A TimeOnly value. Remarks The field must be formatted according to the RFC 3339. Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as a TimeOnly value. GetTimeSpan() Parses the current field as TimeSpan. public TimeSpan GetTimeSpan() Returns TimeSpan A TimeSpan value. Remarks The field must be formatted according to the RFC 3339 and include only \"D\", \"H\", \"M\", or \"S\" designators. Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as a TimeSpan value. GetUInt128() Parses the current field as an UInt128. [CLSCompliant(false)] public UInt128 GetUInt128() Returns UInt128 A UInt128 value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as an UInt128 value. GetUInt16() Parses the current field as an ushort. [CLSCompliant(false)] public ushort GetUInt16() Returns ushort A ushort value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as an ushort value. GetUInt32() Parses the current field as an uint. [CLSCompliant(false)] public uint GetUInt32() Returns uint A uint value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as an uint value. GetUInt64() Parses the current field as an ulong. [CLSCompliant(false)] public ulong GetUInt64() Returns ulong A ulong value. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. Exceptions FormatException The current field cannot be parsed as an ulong value. GetUri() Parses the current field as System.Uri. public Uri GetUri() Returns Uri An System.Uri instance. Remarks The field must be formatted according to the RFC 3986. Leading and trailing white-space characters are allowed. Exceptions FormatException The current field cannot be parsed as an System.Uri instance. Get<T>(TabularConverter<T>) Parses the current field as T. public T? Get<T>(TabularConverter<T> converter) Parameters converter TabularConverter<T> The converter to parse the field with. Returns T A T value. Type Parameters T The type to parse the field as. Exceptions ArgumentNullException converter is null. FormatException The current field cannot be parsed as T. TryGetBase16Binary(out byte[]?) Tries to parse the current field as binary data encoded with \"base16\" (\"hex\") encoding and returns a value that indicates whether the operation succeeded. public bool TryGetBase16Binary(out byte[]? value) Parameters value byte[] When this method returns, contains an array of bytes that represents the current field, or null on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be formatted according to the RFC 4648. Leading and trailing white-space characters are allowed. TryGetBase64Binary(out byte[]?) Tries to parse the current field as binary data encoded with \"base64\" encoding and returns a value that indicates whether the operation succeeded. public bool TryGetBase64Binary(out byte[]? value) Parameters value byte[] When this method returns, contains an array of bytes that represents the current field, or null on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be formatted according to the RFC 4648. Leading and trailing white-space characters are allowed. TryGetBigInteger(out BigInteger) Tries to parse the current field as BigInteger and returns a value that indicates whether the operation succeeded. public bool TryGetBigInteger(out BigInteger value) Parameters value BigInteger When this method returns, contains a BigInteger value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetBoolean(out bool) Tries to parse the current field as bool and returns a value that indicates whether the operation succeeded. public bool TryGetBoolean(out bool value) Parameters value bool When this method returns, contains a bool value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be represented as one of the literals: \"false\", \"true\", \"0\", \"1\". Leading and trailing white-space characters are allowed. TryGetByte(out byte) Tries to parse the current field as byte and returns a value that indicates whether the operation succeeded. public bool TryGetByte(out byte value) Parameters value byte When this method returns, contains a byte value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, percent sign are allowed. TryGetChar(out char) Tries to parse the current field as char and returns a value that indicates whether the operation succeeded. public bool TryGetChar(out char value) Parameters value char When this method returns, contains a char value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be represented as one UTF-16 code unit. TryGetDateOnly(out DateOnly) Tries to parse the current field as DateOnly and returns a value that indicates whether the operation succeeded. public bool TryGetDateOnly(out DateOnly value) Parameters value DateOnly When this method returns, contains a DateOnly value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be formatted according to the RFC 3339. Leading and trailing white-space characters are allowed. TryGetDateTime(out DateTime) Tries to parse the current field as DateTime and returns a value that indicates whether the operation succeeded. public bool TryGetDateTime(out DateTime value) Parameters value DateTime When this method returns, contains a DateTime value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be formatted according to the RFC 3339. Leading and trailing white-space characters are allowed. TryGetDateTimeOffset(out DateTimeOffset) Tries to parse the current field as DateTimeOffset and returns a value that indicates whether the operation succeeded. public bool TryGetDateTimeOffset(out DateTimeOffset value) Parameters value DateTimeOffset When this method returns, contains a DateTimeOffset value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be formatted according to the RFC 3339. Leading and trailing white-space characters are allowed. TryGetDecimal(out decimal) Tries to parse the current field as decimal and returns a value that indicates whether the operation succeeded. public bool TryGetDecimal(out decimal value) Parameters value decimal When this method returns, contains a decimal value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetDouble(out double) Tries to parse the current field as double and returns a value that indicates whether the operation succeeded. public bool TryGetDouble(out double value) Parameters value double When this method returns, contains a double value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetGuid(out Guid) Tries to parse the current field as Guid and returns a value that indicates whether the operation succeeded. public bool TryGetGuid(out Guid value) Parameters value Guid When this method returns, contains a Guid value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be formatted according to the RFC 4122. Leading and trailing white-space characters are allowed. TryGetHalf(out Half) Tries to parse the current field as Half and returns a value that indicates whether the operation succeeded. public bool TryGetHalf(out Half value) Parameters value Half When this method returns, contains a Half value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetInt128(out Int128) Tries to parse the current field as Int128 and returns a value that indicates whether the operation succeeded. public bool TryGetInt128(out Int128 value) Parameters value Int128 When this method returns, contains a Int128 value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetInt16(out short) Tries to parse the current field as short and returns a value that indicates whether the operation succeeded. public bool TryGetInt16(out short value) Parameters value short When this method returns, contains a short value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetInt32(out int) Tries to parse the current field as int and returns a value that indicates whether the operation succeeded. public bool TryGetInt32(out int value) Parameters value int When this method returns, contains a int value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetInt64(out long) Tries to parse the current field as long and returns a value that indicates whether the operation succeeded. public bool TryGetInt64(out long value) Parameters value long When this method returns, contains a long value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetSByte(out sbyte) Tries to parse the current field as sbyte and returns a value that indicates whether the operation succeeded. [CLSCompliant(false)] public bool TryGetSByte(out sbyte value) Parameters value sbyte When this method returns, contains a sbyte value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, percent sign are allowed. TryGetSingle(out float) Tries to parse the current field as float and returns a value that indicates whether the operation succeeded. public bool TryGetSingle(out float value) Parameters value float When this method returns, contains a float value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetString(out string?) Tries to transcode the current field as string and returns a value that indicates whether the operation succeeded. public bool TryGetString(out string? value) Parameters value string When this method returns, contains a string instance that represents the current field, or null. This parameter is treated as uninitialized. Returns bool true if a value was successfully transcoded; otherwise, false. TryGetTimeOnly(out TimeOnly) Tries to parse the current field as TimeOnly and returns a value that indicates whether the operation succeeded. public bool TryGetTimeOnly(out TimeOnly value) Parameters value TimeOnly When this method returns, contains a TimeOnly value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be formatted according to the RFC 3339. Leading and trailing white-space characters are allowed. TryGetTimeSpan(out TimeSpan) Tries to parse the current field as TimeSpan and returns a value that indicates whether the operation succeeded. public bool TryGetTimeSpan(out TimeSpan value) Parameters value TimeSpan When this method returns, contains a TimeSpan value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be formatted according to the RFC 3339 and include only \"D\", \"H\", \"M\", or \"S\" designators. Leading and trailing white-space characters are allowed. TryGetUInt128(out UInt128) Tries to parse the current field as UInt128 and returns a value that indicates whether the operation succeeded. [CLSCompliant(false)] public bool TryGetUInt128(out UInt128 value) Parameters value UInt128 When this method returns, contains a UInt128 value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetUInt16(out ushort) Tries to parse the current field as ushort and returns a value that indicates whether the operation succeeded. [CLSCompliant(false)] public bool TryGetUInt16(out ushort value) Parameters value ushort When this method returns, contains a ushort value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetUInt32(out uint) Tries to parse the current field as uint and returns a value that indicates whether the operation succeeded. [CLSCompliant(false)] public bool TryGetUInt32(out uint value) Parameters value uint When this method returns, contains a uint value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetUInt64(out ulong) Tries to parse the current field as ulong and returns a value that indicates whether the operation succeeded. [CLSCompliant(false)] public bool TryGetUInt64(out ulong value) Parameters value ulong When this method returns, contains a ulong value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks Leading and trailing white-space characters, group separators, percent and per mille signs are allowed. TryGetUri(out Uri?) Tries to parse the current field as System.Uri and returns a value that indicates whether the operation succeeded. public bool TryGetUri(out Uri? value) Parameters value Uri When this method returns, contains an System.Uri instance that represents the current field, or null on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Remarks The value should be formatted according to the RFC 3986. Leading and trailing white-space characters are allowed. TryGet<T>(TabularConverter<T>, out T?) Tries to parse the current field as T and returns a value that indicates whether the operation succeeded. public bool TryGet<T>(TabularConverter<T> converter, out T? value) Parameters converter TabularConverter<T> The converter to parse the field with. value T When this method returns, contains a T value that represents the current field, or an undefined value on failure. This parameter is treated as uninitialized. Returns bool true if the field was successfully parsed; otherwise, false. Type Parameters T The type to parse the field as. Exceptions ArgumentNullException converter is null. TryPickRecord() Tries to switch the reader to the next record. public bool TryPickRecord() Returns bool true if the reader was successfully switched; otherwise, false. TryReadField() Tries to read the content of the next field of the current record. public bool TryReadField() Returns bool true if the field was successfully read; otherwise, false. Exceptions TabularContentException An unexpected character or end of stream was encountered. TryReadFieldAsync(CancellationToken) Asynchronously tries to read the content of the next field of the current record. public ValueTask<bool> TryReadFieldAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask<bool> A task object that, when awaited, produces true if the field was successfully read; otherwise, false. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. TabularContentException An unexpected character or end of stream was encountered. This exception is stored into the returned task. TrySkipField() Tries to advance the reader to the next field of the current record. public bool TrySkipField() Returns bool true if the reader was successfully advanced; otherwise, false. Exceptions TabularContentException An unexpected character or end of stream was encountered. TrySkipFieldAsync(CancellationToken) Asynchronously tries to advance the reader to the next field of the current record. public ValueTask<bool> TrySkipFieldAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask<bool> A task object that, when awaited, produces true if the reader was successfully advanced; otherwise, false. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. TabularContentException An unexpected character or end of stream was encountered. This exception is stored into the returned task."
  },
  "api/Addax.Formats.Tabular.TabularRecord-1.html": {
    "href": "api/Addax.Formats.Tabular.TabularRecord-1.html",
    "title": "Struct TabularRecord<T>",
    "keywords": "Struct TabularRecord<T> Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Represents a container that may or may not have a stored object. public readonly struct TabularRecord<T> where T : notnull Type Parameters T The type of object stored in the container. Constructors TabularRecord(T) Initializes a new instance of the TabularRecord<T> struct with the specified object. public TabularRecord(T value) Parameters value T The object to initialize the container with."
  },
  "api/Addax.Formats.Tabular.TabularRecordAttribute.html": {
    "href": "api/Addax.Formats.Tabular.TabularRecordAttribute.html",
    "title": "Class TabularRecordAttribute",
    "keywords": "Class TabularRecordAttribute Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Instructs the source generator to generate a record handler for the target type. This class cannot be inherited. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)] public sealed class TabularRecordAttribute : Attribute Inheritance object Attribute TabularRecordAttribute Remarks An instance of the generated record handler will be automatically added to the Handlers shared collection, which is used to resolve the required handler for reading and writing records. Use the TabularFieldOrderAttribute attribute to map a type member to a tabular field, and optional attributes TabularFieldNameAttribute and TabularConverterAttribute to define a field name and apply a value converter. Constructors TabularRecordAttribute() Initializes a new instance of the TabularRecordAttribute class. public TabularRecordAttribute()"
  },
  "api/Addax.Formats.Tabular.TabularRegistry.html": {
    "href": "api/Addax.Formats.Tabular.TabularRegistry.html",
    "title": "Class TabularRegistry",
    "keywords": "Class TabularRegistry Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Represents a registry of shared components for reading and writing tabular data. This class cannot be inherited. public static class TabularRegistry Inheritance object TabularRegistry Properties Handlers Gets the collection of shared record handlers. public static IDictionary<Type, object> Handlers { get; } Property Value IDictionary<Type, object> A thread-safe dictionary with a record type as the key."
  },
  "api/Addax.Formats.Tabular.TabularStringFactory.html": {
    "href": "api/Addax.Formats.Tabular.TabularStringFactory.html",
    "title": "Class TabularStringFactory",
    "keywords": "Class TabularStringFactory Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Provides a creation method for creating string instances from character sequences. public class TabularStringFactory : IDisposable Inheritance object TabularStringFactory Implements IDisposable Constructors TabularStringFactory() Initializes a new instance of the TabularStringFactory class. public TabularStringFactory() TabularStringFactory(int) Initializes a new instance of the TabularStringFactory class with the specified maximum string length. public TabularStringFactory(int maxLength) Parameters maxLength int The maximum length of a string to participate in pooling. Must be greater than zero and less than or equal to MaxLength. Remarks This constructor enables a thread-safe string pool based on hash code and length. Methods Create(ReadOnlySpan<char>) Create a string instance from a character sequence. public virtual string Create(ReadOnlySpan<char> source) Parameters source ReadOnlySpan<char> The read-only character sequence to create from. Returns string A new or an existing string instance. Dispose() Releases the resources used by the current instance of the TabularStringFactory class. public void Dispose() Dispose(bool) Releases the managed and unmanaged resources used by the current instance of the TabularStringFactory class. protected virtual void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources."
  },
  "api/Addax.Formats.Tabular.TabularWriter-1.html": {
    "href": "api/Addax.Formats.Tabular.TabularWriter-1.html",
    "title": "Class TabularWriter<T>",
    "keywords": "Class TabularWriter<T> Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Provides forward-only, write-only access to tabular data records. This class cannot be inherited. public sealed class TabularWriter<T> : IDisposable, IAsyncDisposable where T : notnull Type Parameters T The type of an object that represents a record. Inheritance object TabularWriter<T> Implements IDisposable IAsyncDisposable Constructors TabularWriter(Stream, TabularDialect, TabularOptions?, TabularHandler<T>?) Initializes a new instance of the TabularWriter<T> class for the specified stream using the provided dialect, options, and record handler. public TabularWriter(Stream stream, TabularDialect dialect, TabularOptions? options = null, TabularHandler<T>? handler = null) Parameters stream Stream The stream to write to. dialect TabularDialect The dialect to use for writing. options TabularOptions The options to control the behavior during writing. handler TabularHandler<T> The handler to write a T instance to a record. Exceptions ArgumentException stream does not support writing. ArgumentNullException stream or dialect is null. InvalidOperationException The record handler is not specified and cannot be found in the registry. Properties BytesCommitted Gets the number of bytes committed so far. public long BytesCommitted { get; } Property Value long A non-negative 64-bit signed integer. Remarks Might be greater than the number of bytes written to the underlying stream. RecordsWritten Gets the number of records written so far. public long RecordsWritten { get; } Property Value long A non-negative 64-bit signed integer. Methods Dispose() Releases the resources used by the current instance of the TabularWriter<T> class. public void Dispose() Remarks If the record handler defines a header, it will be automatically written. DisposeAsync() Asynchronously releases the resources used by the current instance of the TabularWriter<T> class. public ValueTask DisposeAsync() Returns ValueTask A task object. Remarks If the record handler defines a header, it will be automatically written. Flush() Writes any buffered data to the underlying stream. public void Flush() FlushAsync(CancellationToken) Asynchronously writes any buffered data to the underlying stream. public ValueTask FlushAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteRecord(in T) Writes the next record represented as T. public void WriteRecord(in T record) Parameters record T The record to write. Remarks If the record handler defines a header, it will be automatically written. Exceptions ArgumentNullException record is null. WriteRecordAsync(T, CancellationToken) Asynchronously writes the next record represented as T. public ValueTask WriteRecordAsync(T record, CancellationToken cancellationToken = default) Parameters record T The record to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks If the record handler defines a header, it will be automatically written. Exceptions ArgumentNullException record is null. OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task."
  },
  "api/Addax.Formats.Tabular.TabularWriter.html": {
    "href": "api/Addax.Formats.Tabular.TabularWriter.html",
    "title": "Class TabularWriter",
    "keywords": "Class TabularWriter Namespace Addax.Formats.Tabular Assembly Addax.Formats.Tabular.dll Provides forward-only, write-only access to tabular data fields. This class cannot be inherited. public sealed class TabularWriter : IDisposable, IAsyncDisposable Inheritance object TabularWriter Implements IDisposable IAsyncDisposable Constructors TabularWriter(Stream, TabularDialect, TabularOptions?) Initializes a new instance of the TabularWriter class for the specified stream using the provided dialect and options. public TabularWriter(Stream stream, TabularDialect dialect, TabularOptions? options = null) Parameters stream Stream The stream to write to. dialect TabularDialect The dialect to use for writing. options TabularOptions The options to control the behavior during writing. Exceptions ArgumentException stream does not support writing. ArgumentNullException stream or dialect is null. Properties BytesCommitted Gets the number of bytes committed so far. public long BytesCommitted { get; } Property Value long A non-negative 64-bit signed integer. Remarks Might be greater than the number of bytes written to the underlying stream. CurrentPositionType Gets the type of the current writer position. public TabularPositionType CurrentPositionType { get; } Property Value TabularPositionType A position type enumeration value. FieldsWritten Gets the number of fields written to the current record so far. public long FieldsWritten { get; } Property Value long A non-negative 64-bit signed integer. RecordsWritten Gets the number of records written so far. public long RecordsWritten { get; } Property Value long A non-negative 64-bit signed integer. Methods Dispose() Releases the resources used by the current instance of the TabularWriter class. public void Dispose() DisposeAsync() Asynchronously releases the resources used by the current instance of the TabularWriter class. public ValueTask DisposeAsync() Returns ValueTask A task object. FinishRecord() Instructs the writer to finish accepting fields for the current record. public void FinishRecord() Flush() Writes any buffered data to the underlying stream. public void Flush() FlushAsync(CancellationToken) Asynchronously writes any buffered data to the underlying stream. public ValueTask FlushAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteAnnotation(ReadOnlySpan<char>) Writes a sequence of characters as the next record with annotation. public void WriteAnnotation(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> A ReadOnlySpan<T> instance to write. Exceptions ArgumentException The value cannot be formatted into a sequence of characters or the formatted value exceeds the supported field length. InvalidOperationException The current dialect does not support the operation. WriteAnnotation(string?) Writes a string instance as the next record with annotation. public void WriteAnnotation(string? value) Parameters value string A string instance to write. Exceptions ArgumentException The value cannot be formatted into a sequence of characters or the formatted value exceeds the supported field length. InvalidOperationException The current dialect does not support the operation. WriteAnnotationAsync(ReadOnlyMemory<char>, CancellationToken) Asynchronously writes a sequence of characters as the next record with annotation. public ValueTask WriteAnnotationAsync(ReadOnlyMemory<char> value, CancellationToken cancellationToken = default) Parameters value ReadOnlyMemory<char> A ReadOnlyMemory<T> instance to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions ArgumentException The value cannot be formatted into a sequence of characters or the formatted value exceeds the supported field length. This exception is stored into the returned task. InvalidOperationException The current dialect does not support the operation. This exception is stored into the returned task. OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteAnnotationAsync(string?, CancellationToken) Asynchronously writes a string instance as the next record with annotation. public ValueTask WriteAnnotationAsync(string? value, CancellationToken cancellationToken = default) Parameters value string A string instance to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions ArgumentException The value cannot be formatted into a sequence of characters or the formatted value exceeds the supported field length. This exception is stored into the returned task. InvalidOperationException The current dialect does not support the operation. This exception is stored into the returned task. OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteAsync<T>(T?, TabularConverter<T>, CancellationToken) Asynchronously writes T value as the next value field of the current record. public ValueTask WriteAsync<T>(T? value, TabularConverter<T> converter, CancellationToken cancellationToken = default) Parameters value T T value to write. converter TabularConverter<T> The converter to format the value with. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Type Parameters T The type of the value to write. Exceptions ArgumentException The formatted value exceeds the supported field length. This exception is stored into the returned task. ArgumentNullException converter is null. OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteBase16Binary(byte[]?) Writes binary data encoded with \"base16\" (\"hex\") encoding as the next value field of the current record. public void WriteBase16Binary(byte[]? value) Parameters value byte[] An array of bytes to write. Remarks The value will be formatted according to the RFC 4648. Exceptions ArgumentException The formatted field exceeds the supported field length. WriteBase16BinaryAsync(byte[]?, CancellationToken) Asynchronously writes binary data encoded with \"base16\" (\"hex\") encoding as the next value field of the current record. public ValueTask WriteBase16BinaryAsync(byte[]? value, CancellationToken cancellationToken = default) Parameters value byte[] An array of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be formatted according to the RFC 4648. Exceptions FormatException The value cannot be formatted into a sequence of characters. This exception is stored into the returned task. OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteBase64Binary(byte[]?) Writes binary data encoded with \"base64\" encoding as the next value field of the current record. public void WriteBase64Binary(byte[]? value) Parameters value byte[] An array of bytes to write. Remarks The value will be formatted according to the RFC 4648. Exceptions ArgumentException The formatted field exceeds the supported field length. WriteBase64BinaryAsync(byte[]?, CancellationToken) Asynchronously writes binary data encoded with \"base64\" encoding as the next value field of the current record. public ValueTask WriteBase64BinaryAsync(byte[]? value, CancellationToken cancellationToken = default) Parameters value byte[] An array of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be formatted according to the RFC 4648. Exceptions FormatException The value cannot be formatted into a sequence of characters. This exception is stored into the returned task. OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteBigInteger(BigInteger) Writes a BigInteger value as the next value field of the current record. public void WriteBigInteger(BigInteger value) Parameters value BigInteger A BigInteger value to write. Exceptions ArgumentException The formatted field exceeds the supported field length. WriteBigIntegerAsync(BigInteger, CancellationToken) Asynchronously writes a BigInteger value as the next value field of the current record. public ValueTask WriteBigIntegerAsync(BigInteger value, CancellationToken cancellationToken = default) Parameters value BigInteger A BigInteger value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions FormatException The value cannot be formatted into a sequence of characters. This exception is stored into the returned task. OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteBoolean(bool) Writes a bool value as the next value field of the current record. public void WriteBoolean(bool value) Parameters value bool A bool value to write. Remarks The value will be represented as one of the literals: \"false\", \"true\". WriteBooleanAsync(bool, CancellationToken) Asynchronously writes a bool value as the next value field of the current record. public ValueTask WriteBooleanAsync(bool value, CancellationToken cancellationToken = default) Parameters value bool A bool value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be represented as one of the literals: \"false\", \"true\". Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteByte(byte) Writes a byte value as the next value field of the current record. public void WriteByte(byte value) Parameters value byte A byte value to write. WriteByteAsync(byte, CancellationToken) Asynchronously writes a byte value as the next value field of the current record. public ValueTask WriteByteAsync(byte value, CancellationToken cancellationToken = default) Parameters value byte A byte value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteChar(char) Writes a char value as the next value field of the current record. public void WriteChar(char value) Parameters value char A char value to write. WriteCharAsync(char, CancellationToken) Asynchronously writes a char value as the next value field of the current record. public ValueTask WriteCharAsync(char value, CancellationToken cancellationToken = default) Parameters value char A char value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteDateOnly(DateOnly) Writes a DateOnly value as the next value field of the current record. public void WriteDateOnly(DateOnly value) Parameters value DateOnly A DateOnly value to write. Remarks The value will be formatted according to the RFC 3339. WriteDateOnlyAsync(DateOnly, CancellationToken) Asynchronously writes a DateOnly value as the next value field of the current record. public ValueTask WriteDateOnlyAsync(DateOnly value, CancellationToken cancellationToken = default) Parameters value DateOnly A DateOnly value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be formatted according to the RFC 3339. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteDateTime(DateTime) Writes a DateTime value as the next value field of the current record. public void WriteDateTime(DateTime value) Parameters value DateTime A DateTime value to write. Remarks The value will be formatted according to the RFC 3339. WriteDateTimeAsync(DateTime, CancellationToken) Asynchronously writes a DateTime value as the next value field of the current record. public ValueTask WriteDateTimeAsync(DateTime value, CancellationToken cancellationToken = default) Parameters value DateTime A DateTime value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be formatted according to the RFC 3339. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteDateTimeOffset(DateTimeOffset) Writes a DateTimeOffset value as the next value field of the current record. public void WriteDateTimeOffset(DateTimeOffset value) Parameters value DateTimeOffset A DateTimeOffset value to write. Remarks The value will be formatted according to the RFC 3339. WriteDateTimeOffsetAsync(DateTimeOffset, CancellationToken) Asynchronously writes a DateTimeOffset value as the next value field of the current record. public ValueTask WriteDateTimeOffsetAsync(DateTimeOffset value, CancellationToken cancellationToken = default) Parameters value DateTimeOffset A DateTimeOffset value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be formatted according to the RFC 3339. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteDecimal(decimal) Writes a decimal value as the next value field of the current record. public void WriteDecimal(decimal value) Parameters value decimal A decimal value to write. WriteDecimalAsync(decimal, CancellationToken) Asynchronously writes a decimal value as the next value field of the current record. public ValueTask WriteDecimalAsync(decimal value, CancellationToken cancellationToken = default) Parameters value decimal A decimal value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteDouble(double) Writes a double value as the next value field of the current record. public void WriteDouble(double value) Parameters value double A double value to write. WriteDoubleAsync(double, CancellationToken) Asynchronously writes a double value as the next value field of the current record. public ValueTask WriteDoubleAsync(double value, CancellationToken cancellationToken = default) Parameters value double A double value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteEmpty() Writes an empty sequence of characters as the next value field of the current record. public void WriteEmpty() WriteEmptyAsync(CancellationToken) Asynchronously writes an empty sequence of characters as the next value field of the current record. public ValueTask WriteEmptyAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteGuid(Guid) Writes a Guid value as the next value field of the current record. public void WriteGuid(Guid value) Parameters value Guid A Guid value to write. Remarks The value will be formatted according to the RFC 4122. WriteGuidAsync(Guid, CancellationToken) Asynchronously writes a Guid value as the next value field of the current record. public ValueTask WriteGuidAsync(Guid value, CancellationToken cancellationToken = default) Parameters value Guid A Guid value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be formatted according to the RFC 4122. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteHalf(Half) Writes a Half value as the next value field of the current record. public void WriteHalf(Half value) Parameters value Half A Half value to write. WriteHalfAsync(Half, CancellationToken) Asynchronously writes a Half value as the next value field of the current record. public ValueTask WriteHalfAsync(Half value, CancellationToken cancellationToken = default) Parameters value Half A Half value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteInt128(Int128) Writes a Int128 value as the next value field of the current record. public void WriteInt128(Int128 value) Parameters value Int128 An Int128 value to write. WriteInt128Async(Int128, CancellationToken) Asynchronously writes a Int128 value as the next value field of the current record. public ValueTask WriteInt128Async(Int128 value, CancellationToken cancellationToken = default) Parameters value Int128 An Int128 value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteInt16(short) Writes a short value as the next value field of the current record. public void WriteInt16(short value) Parameters value short A short value to write. WriteInt16Async(short, CancellationToken) Asynchronously writes a short value as the next value field of the current record. public ValueTask WriteInt16Async(short value, CancellationToken cancellationToken = default) Parameters value short A short value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteInt32(int) Writes a int value as the next value field of the current record. public void WriteInt32(int value) Parameters value int An int value to write. WriteInt32Async(int, CancellationToken) Asynchronously writes a int value as the next value field of the current record. public ValueTask WriteInt32Async(int value, CancellationToken cancellationToken = default) Parameters value int An int value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteInt64(long) Writes a long value as the next value field of the current record. public void WriteInt64(long value) Parameters value long A long value to write. WriteInt64Async(long, CancellationToken) Asynchronously writes a long value as the next value field of the current record. public ValueTask WriteInt64Async(long value, CancellationToken cancellationToken = default) Parameters value long A long value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteSByte(sbyte) Writes a sbyte value as the next value field of the current record. [CLSCompliant(false)] public void WriteSByte(sbyte value) Parameters value sbyte A sbyte value to write. WriteSByteAsync(sbyte, CancellationToken) Asynchronously writes a sbyte value as the next value field of the current record. [CLSCompliant(false)] public ValueTask WriteSByteAsync(sbyte value, CancellationToken cancellationToken = default) Parameters value sbyte A sbyte value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteSingle(float) Writes a float value as the next value field of the current record. public void WriteSingle(float value) Parameters value float A float value to write. WriteSingleAsync(float, CancellationToken) Asynchronously writes a float value as the next value field of the current record. public ValueTask WriteSingleAsync(float value, CancellationToken cancellationToken = default) Parameters value float A float value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteString(ReadOnlySpan<char>) Writes a sequence of characters as the next value field of the current record. public void WriteString(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> A ReadOnlySpan<T> instance to write. Exceptions ArgumentException The formatted value exceeds the supported field length. WriteString(string?) Writes a string instance as the next value field of the current record. public void WriteString(string? value) Parameters value string A string instance to write. Exceptions ArgumentException The formatted value exceeds the supported field length. WriteStringAsync(ReadOnlyMemory<char>, CancellationToken) Asynchronously writes a sequence of characters as the next value field of the current record. public ValueTask WriteStringAsync(ReadOnlyMemory<char> value, CancellationToken cancellationToken = default) Parameters value ReadOnlyMemory<char> A ReadOnlyMemory<T> instance to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions ArgumentException The formatted value exceeds the supported field length. This exception is stored into the returned task. OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteStringAsync(string?, CancellationToken) Asynchronously writes a string instance as the next value field of the current record. public ValueTask WriteStringAsync(string? value, CancellationToken cancellationToken = default) Parameters value string A string instance to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions ArgumentException The formatted value exceeds the supported field length. This exception is stored into the returned task. OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteTimeOnly(TimeOnly) Writes a TimeOnly value as the next value field of the current record. public void WriteTimeOnly(TimeOnly value) Parameters value TimeOnly A TimeOnly value to write. Remarks The value will be formatted according to the RFC 3339. WriteTimeOnlyAsync(TimeOnly, CancellationToken) Asynchronously writes a TimeOnly value as the next value field of the current record. public ValueTask WriteTimeOnlyAsync(TimeOnly value, CancellationToken cancellationToken = default) Parameters value TimeOnly A TimeOnly value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be formatted according to the RFC 3339. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteTimeSpan(TimeSpan) Writes a TimeSpan value as the next value field of the current record. public void WriteTimeSpan(TimeSpan value) Parameters value TimeSpan A TimeSpan value to write. Remarks The value will be formatted according to the RFC 3339. WriteTimeSpanAsync(TimeSpan, CancellationToken) Asynchronously writes a TimeSpan value as the next value field of the current record. public ValueTask WriteTimeSpanAsync(TimeSpan value, CancellationToken cancellationToken = default) Parameters value TimeSpan A TimeSpan value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be formatted according to the RFC 3339. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteUInt128(UInt128) Writes a UInt128 value as the next value field of the current record. [CLSCompliant(false)] public void WriteUInt128(UInt128 value) Parameters value UInt128 An UInt128 value to write. WriteUInt128Async(UInt128, CancellationToken) Asynchronously writes a UInt128 value as the next value field of the current record. [CLSCompliant(false)] public ValueTask WriteUInt128Async(UInt128 value, CancellationToken cancellationToken = default) Parameters value UInt128 An UInt128 value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteUInt16(ushort) Writes a ushort value as the next value field of the current record. [CLSCompliant(false)] public void WriteUInt16(ushort value) Parameters value ushort An ushort value to write. WriteUInt16Async(ushort, CancellationToken) Asynchronously writes a ushort value as the next value field of the current record. [CLSCompliant(false)] public ValueTask WriteUInt16Async(ushort value, CancellationToken cancellationToken = default) Parameters value ushort An ushort value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteUInt32(uint) Writes a uint value as the next value field of the current record. [CLSCompliant(false)] public void WriteUInt32(uint value) Parameters value uint An uint value to write. WriteUInt32Async(uint, CancellationToken) Asynchronously writes a uint value as the next value field of the current record. [CLSCompliant(false)] public ValueTask WriteUInt32Async(uint value, CancellationToken cancellationToken = default) Parameters value uint An uint value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteUInt64(ulong) Writes a ulong value as the next value field of the current record. [CLSCompliant(false)] public void WriteUInt64(ulong value) Parameters value ulong An ulong value to write. WriteUInt64Async(ulong, CancellationToken) Asynchronously writes a ulong value as the next value field of the current record. [CLSCompliant(false)] public ValueTask WriteUInt64Async(ulong value, CancellationToken cancellationToken = default) Parameters value ulong An ulong value to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. WriteUri(Uri?) Writes an System.Uri instance as the next value field of the current record. public void WriteUri(Uri? value) Parameters value Uri An System.Uri instance to write. Remarks The value will be formatted according to the RFC 3986. WriteUriAsync(Uri?, CancellationToken) Asynchronously writes an System.Uri instance as the next value field of the current record. public ValueTask WriteUriAsync(Uri? value, CancellationToken cancellationToken = default) Parameters value Uri An System.Uri instance to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns ValueTask A task object. Remarks The value will be formatted according to the RFC 3986. Exceptions OperationCanceledException The cancellation token was canceled. This exception is stored into the returned task. Write<T>(T?, TabularConverter<T>) Writes T value as the next value field of the current record. public void Write<T>(T? value, TabularConverter<T> converter) Parameters value T T value to write. converter TabularConverter<T> The converter to format the value with. Type Parameters T The type of the value to write. Exceptions ArgumentException The formatted value exceeds the supported field length. ArgumentNullException converter is null."
  },
  "api/Addax.Formats.Tabular.html": {
    "href": "api/Addax.Formats.Tabular.html",
    "title": "Namespace Addax.Formats.Tabular",
    "keywords": "Namespace Addax.Formats.Tabular Namespaces Addax.Formats.Tabular.Converters Classes TabularContentException The exception that is thrown when tabular data is invalid. TabularConverterAttribute Specifies the type of a tabular value converter. This class cannot be inherited. TabularConverter<T> Defines the core behavior of converting a value from or to a sequence of characters and provides a base for derived classes. TabularDialect Specifies how to read and write tabular data. This class cannot be inherited. TabularFieldNameAttribute Specifies the name of a tabular field. This class cannot be inherited. TabularFieldOrderAttribute Specifies the order of a tabular field. This class cannot be inherited. TabularHandler<T> Defines the core behavior of reading an object from or writing an object to a tabular record and provides a base for derived classes. TabularOptions Specifies options to control the behavior of reading and writing tabular data. This class cannot be inherited. TabularReader Provides forward-only, read-only access to tabular data fields. This class cannot be inherited. TabularReader<T> Provides forward-only, read-only access to tabular data records. This class cannot be inherited. TabularRecordAttribute Instructs the source generator to generate a record handler for the target type. This class cannot be inherited. TabularRegistry Represents a registry of shared components for reading and writing tabular data. This class cannot be inherited. TabularStringFactory Provides a creation method for creating string instances from character sequences. TabularWriter Provides forward-only, write-only access to tabular data fields. This class cannot be inherited. TabularWriter<T> Provides forward-only, write-only access to tabular data records. This class cannot be inherited. Structs TabularRecord<T> Represents a container that may or may not have a stored object. Enums TabularFieldType Specifies the type of a tabular field. TabularPositionType Specifies the type of a position in tabular data."
  },
  "index.html": {
    "href": "index.html",
    "title": "Addax - Overview",
    "keywords": "Addax - Overview Introduction The framework defines several fundamental types, however, the core types are the following: TabularReader - designed for reading tabular fields as strings or typed values. TabularWriter - designed for writing tabular fields as strings or typed values. TabularReader<T> - designed for reading tabular records as instances of the specified type. TabularWriter<T> - designed for writing tabular records as instances of the specified type. All variants of readers and writers provide forward-only access to tabular data. The non-generic reader and writer can process tabular data of any structure and represent the low-level framework API. The generic reader and writer are built on top of the low-level API and represent the high-level framework API. A straightforward value converter abstraction provides an ability to work with tabular fields as typed values. On top of that, a record handler abstraction provides an ability to work with tabular records as instances of the specified type defining the complete reading and writing workflows. Even though record handlers can be created manually, the main approach is to generate record handlers automatically by the built-in source generator based on metadata defined with attributes. Here are a few common examples of practical framework usage: Example #1 The following example shows how to display the first ten records from a file with an unknown structure, formatted according to the RFC 4180: High-level API Low-level API using Addax.Formats.Tabular; var stream = File.OpenRead(\"data.csv\"); var dialect = new TabularDialect(\"\\r\\n\", ',', '\\\"'); using (var reader = new TabularReader<string?[]>(stream, dialect)) { while (reader.TryReadRecord() && (reader.RecordsRead <= 10)) { Console.WriteLine(string.Join('|', reader.CurrentRecord)); } } using Addax.Formats.Tabular; var stream = File.OpenRead(\"data.csv\"); var dialect = new TabularDialect(\"\\r\\n\", ',', '\\\"'); using (var reader = new TabularReader(stream, dialect)) { while (reader.TryPickRecord() && (reader.RecordsRead <= 10)) { while (reader.TryReadField()) { Console.Write(reader.GetString()); Console.Write('|'); } Console.WriteLine(); } } Example #2 The following example shows how to process tabular data with a known structure: High-level API Low-level API using Addax.Formats.Tabular; var dialect = new TabularDialect(\"\\n\", ',', '\\\"'); using (var writer = new TabularWriter<Book>(File.Create(\"books.csv\"), dialect)) { var book1 = new Book { Author = \"Lewis Carroll\", Title = \"Alice's Adventures in Wonderland\", Published = new(1865, 11, 09) }; writer.WriteRecord(book1); var book2 = new Book { Author = \"H. G. Wells\", Title = \"The Time Machine\", Published = new(1894, 03, 17) }; writer.WriteRecord(book2); } using (var reader = new TabularReader<Book>(File.OpenRead(\"books.csv\"), dialect)) { while (reader.TryReadRecord()) { var book = reader.CurrentRecord; Console.WriteLine($\"{book.Author} '{book.Title}' ({book.Published})\"); } } [TabularRecord] internal struct Book { [TabularFieldOrder(0)] public string? Author; [TabularFieldOrder(1)] public string? Title; [TabularFieldOrder(2)] public DateOnly? Published; } using Addax.Formats.Tabular; var dialect = new TabularDialect(\"\\n\", ',', '\\\"'); using (var writer = new TabularWriter(File.Create(\"books.csv\"), dialect)) { writer.WriteString(\"Lewis Carroll\"); writer.WriteString(\"Alice's Adventures in Wonderland\"); writer.WriteDateOnly(new(1865, 11, 09)); writer.FinishRecord(); writer.WriteString(\"H. G. Wells\"); writer.WriteString(\"The Time Machine\"); writer.WriteDateOnly(new(1894, 03, 17)); writer.FinishRecord(); } using (var reader = new TabularReader(File.OpenRead(\"books.csv\"), dialect)) { while (reader.TryPickRecord()) { reader.TryReadField(); reader.TryGetString(out var author); reader.TryReadField(); reader.TryGetString(out var title); reader.TryReadField(); reader.TryGetDateOnly(out var published); Console.WriteLine($\"{author} '{title}' ({published})\"); } } Example #3 The following example shows how to process tabular data with a header: High-level API Low-level API using Addax.Formats.Tabular; var dialect = new TabularDialect(\"\\n\", ',', '\\\"'); using (var writer = new TabularWriter<Book>(File.Create(\"books.csv\"), dialect)) { var book1 = new Book { Author = \"Lewis Carroll\", Title = \"Alice's Adventures in Wonderland\", Published = new(1865, 11, 09) }; writer.WriteRecord(book1); var book2 = new Book { Author = \"H. G. Wells\", Title = \"The Time Machine\", Published = new(1894, 03, 17) }; writer.WriteRecord(book2); } using (var reader = new TabularReader<Book>(File.OpenRead(\"books.csv\"), dialect)) { while (reader.TryReadRecord()) { var book = reader.CurrentRecord; Console.WriteLine($\"{book.Author} '{book.Title}' ({book.Published})\"); } } [TabularRecord] internal struct Book { [TabularFieldName(\"author\")] [TabularFieldOrder(0)] public string? Author; [TabularFieldName(\"title\")] [TabularFieldOrder(1)] public string? Title; [TabularFieldName(\"published\")] [TabularFieldOrder(2)] public DateOnly? Published; } using Addax.Formats.Tabular; var dialect = new TabularDialect(\"\\n\", ',', '\\\"'); using (var writer = new TabularWriter(File.Create(\"books.csv\"), dialect)) { writer.WriteString(\"author\"); writer.WriteString(\"title\"); writer.WriteString(\"published\"); writer.FinishRecord(); writer.WriteString(\"Lewis Carroll\"); writer.WriteString(\"Alice's Adventures in Wonderland\"); writer.WriteDateOnly(new(1865, 11, 09)); writer.FinishRecord(); writer.WriteString(\"H. G. Wells\"); writer.WriteString(\"The Time Machine\"); writer.WriteDateOnly(new(1894, 03, 17)); writer.FinishRecord(); } using (var reader = new TabularReader(File.OpenRead(\"books.csv\"), dialect)) { if (reader.TryPickRecord()) { while (reader.TryReadField()) { } } while (reader.TryPickRecord()) { reader.TryReadField(); reader.TryGetString(out var author); reader.TryReadField(); reader.TryGetString(out var title); reader.TryReadField(); reader.TryGetDateOnly(out var published); Console.WriteLine($\"{author} '{title}' ({published})\"); } }"
  },
  "topics/benchmarks.html": {
    "href": "topics/benchmarks.html",
    "title": "Addax - Benchmarks",
    "keywords": "Addax - Benchmarks .NET SDK 8.0.100-rc.2.23502.2, BenchmarkDotNet v0.13.10 Method Mean Error StdDev Median Min Max Op/s Allocated 'read - empty' 6,915.3 µs 135.99 µs 156.61 µs 6,880.8 µs 6,659.2 µs 7,175.2 µs 144.61 389 B 'read - normal' 18,521.3 µs 248.62 µs 232.56 µs 18,495.0 µs 18,235.7 µs 18,994.2 µs 53.99 406 B 'read - escaped' 33,057.6 µs 222.56 µs 173.76 µs 32,980.2 µs 32,878.6 µs 33,417.8 µs 30.25 427 B 'read - empty (saync)' 7,354.0 µs 68.49 µs 60.72 µs 7,327.3 µs 7,292.0 µs 7,480.3 µs 135.98 389 B 'read - normal (async)' 18,709.2 µs 25.89 µs 22.95 µs 18,713.0 µs 18,646.0 µs 18,735.8 µs 53.45 406 B 'read - escaped (async)' 36,647.7 µs 426.65 µs 399.09 µs 36,734.1 µs 36,039.5 µs 37,172.7 µs 27.29 433 B Method Mean Error StdDev Median Min Max Op/s Allocated 'write - empty' 5,384.5 µs 25.95 µs 24.28 µs 5,379.4 µs 5,353.6 µs 5,429.3 µs 185.72 277 B 'write - normal' 9,739.2 µs 29.63 µs 26.27 µs 9,744.2 µs 9,690.4 µs 9,773.9 µs 102.68 395 B 'write - escaped' 15,129.0 µs 31.95 µs 28.32 µs 15,122.8 µs 15,088.4 µs 15,191.1 µs 66.10 395 B 'write - empty (async)' 10,151.7 µs 56.37 µs 49.97 µs 10,147.4 µs 10,087.4 µs 10,272.9 µs 98.51 283 B 'write - normal (async)' 14,848.0 µs 60.42 µs 56.52 µs 14,846.0 µs 14,770.8 µs 14,971.1 µs 67.35 395 B 'write - escaped (async)' 20,566.5 µs 118.96 µs 99.33 µs 20,535.4 µs 20,448.6 µs 20,799.8 µs 48.62 406 B Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Median : Value separating the higher half of all measurements (50th percentile) Min : Minimum Max : Maximum Op/s : Operation per second Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 µs : 1 Microsecond (0.000001 sec)"
  },
  "topics/extensibility/record-handlers.html": {
    "href": "topics/extensibility/record-handlers.html",
    "title": "Addax - Record Handlers",
    "keywords": "Addax - Record Handlers A custom handler A simple example of a custom record handler that interprets a record as the (double, double) type: internal sealed class PointHandler : TabularHandler<(double, double)> { public override TabularRecord<(double, double)> Read(TabularReader reader) { reader.TryReadField(); reader.TryGetDouble(out var item0); reader.TryReadField(); reader.TryGetDouble(out var item1); return new((item0, item1)); } public override void Write(TabularWriter writer, (double, double) record) { writer.WriteDouble(record.Item1); writer.WriteDouble(record.Item2); } } The primary approach for using a custom record handler is to specify it explicitly: var handler = new PointHandler(); var writer = new TabularWriter<(double, double)>(stream1, dialect, handler: handler); var reader = new TabularReader<(double, double)>(stream2, dialect, handler: handler); Additonally, it can be added to the TabularRegistry.Handlers shared collection with generated record handlers: TabularRegistry.Handlers[typeof((double, double))] = new PointHandler();"
  },
  "topics/extensibility/value-converters.html": {
    "href": "topics/extensibility/value-converters.html",
    "title": "Addax - Value Converters",
    "keywords": "Addax - Value Converters A custom converter A complete example of a custom value converter that handles values of the System.DateTime type represented as Unix timestamps: internal sealed class UnixDateTimeConverter : TabularConverter<DateTime> { public override bool TryFormat(DateTime value, Span<char> destination, IFormatProvider? provider, out int charsWritten) { var seconds = (long)(value.ToUniversalTime() - DateTime.UnixEpoch).TotalSeconds; return seconds.TryFormat(destination, out charsWritten, \"g\", provider); } public override bool TryParse(ReadOnlySpan<char> source, IFormatProvider? provider, out DateTime value) { if (long.TryParse(source, NumberStyles.Integer, provider, out var seconds)) { value = DateTime.UnixEpoch.AddSeconds(seconds); return true; } else { value = default; return false; } } } For using with low-level API, a custom converter have to be specified explicitly: var converter = new UnixDateTimeConverter(); var writer = new TabularWriter(stream1, dialect); var reader = new TabularReader(stream2, dialect); writer.Write(DateTime.Now, converter); reader.TryGet(converter, out var value); For using with high-level API, a custom converter have to be specified with an optional attribute: [TabularRecord] internal struct Book { [TabularFieldOrder(0)] public string? Author; [TabularFieldOrder(1)] public string? Title; [TabularConverter(typeof(UnixDateTimeConverter))] [TabularFieldOrder(2)] public DateTime? Published; } Standard date and time converters The following converters provide an option to customize the standard behavior by accepting a format specifier in the constructor: Addax.Formats.Tabular.Converters.TabularDateOnlyConverter Addax.Formats.Tabular.Converters.TabularDateTimeConverter Addax.Formats.Tabular.Converters.TabularDateTimeOffsetConverter Addax.Formats.Tabular.Converters.TabularTimeOnlyConverter"
  },
  "topics/features.html": {
    "href": "topics/features.html",
    "title": "Addax - Features",
    "keywords": "Addax - Features Value Types The framework has built-in support for working with tabular fields as values of the following types: Type Format Standard System.Boolean Lexical space: true, false, 1, 0 W3C XMLSCHEMA11-2 System.Byte Format specifier: g System.Char One UTF-16 code unit System.DateOnly yyyy'-'MM'-'dd RFC 3339 / ISO 8601-1:2019 System.DateTime yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK RFC 3339 / ISO 8601-1:2019 System.DateTimeOffset yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK RFC 3339 / ISO 8601-1:2019 System.Decimal Format specifier: g System.Double Format specifier: g System.Guid 00000000-0000-0000-0000-000000000000 RFC 4122 System.Half Format specifier: g System.Int16 Format specifier: g System.Int32 Format specifier: g System.Int64 Format specifier: g System.Int128 Format specifier: g System.SByte Format specifier: g System.Single Format specifier: g System.String Up to 2,147,483,591 UTF-16 code units System.TimeOnly HH':'mm':'ss.FFFFFFF RFC 3339 / ISO 8601-1:2019 System.TimeSpan [-]'P'd'DT'h'H'm'M's'.'FFFFFFF'S' RFC 3339 / ISO 8601-1:2019 System.UInt16 Format specifier: g System.UInt32 Format specifier: g System.UInt64 Format specifier: g System.UInt128 Format specifier: g System.Uri See Appx. A \"Collected ABNF for URI\" RFC 3986 System.Numerics.BigInteger Format specifier: g System.Byte[] Encoding: \"base16\" (\"hex\") or \"base64\" RFC 4648 Any generated record handler also implicitly supports type members of the System.Nullable<T> type, where T can be any supported value type. Note To use a type member of the System.Byte[] type with a generated record handler, one of the available converters must be specified explicitly: Addax.Formats.Tabular.Converters.TabularBase16BinaryConverter Addax.Formats.Tabular.Converters.TabularBase64BinaryConverter Performance The field and record readers can advance through tabular data without reading it completely, potentially decreasing overall processing time: public sealed class TabularReader { public bool TrySkipField(); public ValueTask<bool> TrySkipFieldAsync(CancellationToken cancellationToken); } public sealed class TabularReader<T> { public bool TrySkipRecord(); public ValueTask<bool> TrySkipRecordAsync(CancellationToken cancellationToken); } Memory Usage The field reader provides access to the last read field in a way that allows reading the field without additional string allocations: public sealed class TabularReader { public ReadOnlyMemory<char> CurrentField { get; } } The default string factory supports a mode with a thread-safe pool based on hash codes, reducing allocations when reading fields as strings: var options = new TabularOptions { StringFactory = new(maxLength: 128) };"
  },
  "topics/grammar.html": {
    "href": "topics/grammar.html",
    "title": "Addax - Grammar",
    "keywords": "Addax - Grammar The engine is based on the following generalized grammar for tabular data: stream = record, {tt, record}; record = field, {dt, field} | at, {char} - tt; field = {char} - (tt | dt | qt) | qt, {{char} - (qt | et) | et, qt | et, et}, qt; at = achar; et = echar; qt = qchar; dt = dchar; tt = tchar1 | tchar1, tchar2; achar = char - (tchar1 | tchar2 | dchar | qchar | echar); echar = char - (tchar1 | tchar2 | dchar); qchar = char - (tchar1 | tchar2 | dchar); dchar = char - (tchar1 | tchar2); tchar2 = char - tchar1; tchar1 = char; char = ? %x00-10FFFF ?; Note Fields with line terminator characters are always written as escaped to ensure formal compatibility with more specific dialects, such as RFC 4180."
  },
  "topics/limitations.html": {
    "href": "topics/limitations.html",
    "title": "Addax - Limitations",
    "keywords": "Addax - Limitations The maximum supported field length varies from \\(2^{30} - 31\\) to \\(2^{31} - 59\\) characters, dependent on escaping. No built-in support for gDay, gMonth, gMonthDay, gYear, and gYearMonth datatypes. No built-in support for source generation of record handlers in languages other than C#."
  }
}