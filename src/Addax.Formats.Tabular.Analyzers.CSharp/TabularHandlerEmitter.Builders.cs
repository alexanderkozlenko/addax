// (c) Oleksandr Kozlenko. Licensed under the MIT license.

namespace Addax.Formats.Tabular.Analyzers.CSharp
{
    internal partial class TabularHandlerEmitter
    {
        private static void BuildHandlerRegistratorSource(SourceTextBuilder builder, string typeName, int handlerCount)
        {
            builder.Append("// <auto-generated />");
            builder.Append();
            builder.Append("namespace Addax.Formats.Tabular.Handlers;");
            builder.Append();
            builder.Append($"[global::System.CodeDom.Compiler.GeneratedCode(\"{s_assemblyInfo.Name}\", \"{s_assemblyInfo.Version}\")]");
            builder.Append($"file static class {typeName}");
            builder.Append("{");
            builder.IndentLevel++;
            builder.Append("[global::System.Runtime.CompilerServices.ModuleInitializer]");
            builder.Append("public static void Initialize()");
            builder.Append("{");
            builder.IndentLevel++;

            for (var i = 0; i < handlerCount; i++)
            {
                builder.Append($"RegisterHandler(new global::Addax.Formats.Tabular.Handlers.Handler{i}());");
            }

            builder.IndentLevel--;
            builder.Append("}");
            builder.Append();
            builder.Append("private static void RegisterHandler<T>(global::Addax.Formats.Tabular.TabularHandler<T> handler)");
            builder.Append("{");
            builder.IndentLevel++;
            builder.Append("global::Addax.Formats.Tabular.TabularRegistry.Handlers[typeof(T)] = handler;");
            builder.IndentLevel--;
            builder.Append("}");
            builder.IndentLevel--;
            builder.Append("}");
        }

        private static void BuildHandlerSource(SourceTextBuilder builder, string typeName, in TabularRecordMapping recordMapping)
        {
            var recordTypeHasHeader = RecordTypeHasHeader(recordMapping);
            var recordTypeHasConverters = RecordTypeHasConverters(recordMapping);

            var fieldCountForReading = GetFieldCountForReading(recordMapping);
            var fieldCountForWriting = GetFieldCountForWriting(recordMapping);

            var fieldOrders = SortDictionaryKeys(recordMapping.FieldMappings);

            builder.Append("// <auto-generated />");
            builder.Append();
            builder.Append("#nullable disable");
            builder.Append();
            builder.Append("namespace Addax.Formats.Tabular.Handlers;");
            builder.Append();
            builder.Append($"[global::System.CodeDom.Compiler.GeneratedCode(\"{s_assemblyInfo.Name}\", \"{s_assemblyInfo.Version}\")]");
            builder.Append($"internal sealed class {typeName} : global::Addax.Formats.Tabular.TabularHandler<{recordMapping.TypeName}>");
            builder.Append("{");
            builder.IndentLevel++;

            if (recordTypeHasHeader)
            {
                builder.Append("private static readonly global::System.String[] s_header = new[]");
                builder.Append("{");
                builder.IndentLevel++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (fieldMapping.FieldNameLiteral.HasValue)
                    {
                        builder.Append($"{fieldMapping.FieldNameLiteral.Value.Text},");
                    }
                    else
                    {
                        builder.Append("\"\",");
                    }
                }

                builder.IndentLevel--;
                builder.Append("};");
                builder.Append();
            }

            if (recordTypeHasConverters)
            {
                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (fieldMapping.ConverterTypeName != null)
                    {
                        builder.Append($"private readonly {fieldMapping.ConverterTypeName} _converter{fieldOrder} = new();");
                    }
                }

                builder.Append();
            }

            if (fieldCountForReading > 0)
            {
                builder.Append($"public override global::Addax.Formats.Tabular.TabularRecord<{recordMapping.TypeName}> Read(global::Addax.Formats.Tabular.TabularReader reader)");
                builder.Append("{");
                builder.IndentLevel++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if ((fieldMapping.MemberAccess & TypeMemberAccess.Write) != 0)
                    {
                        if (!fieldMapping.AsNullableT)
                        {
                            builder.Append($"var value{fieldOrder} = default({fieldMapping.ValueTypeName});");
                        }
                        else
                        {
                            builder.Append($"var value{fieldOrder} = default({fieldMapping.ValueTypeName}?);");
                        }
                    }
                }

                builder.Append();

                var fieldTypeCheckEmitted = false;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if ((fieldMapping.MemberAccess & TypeMemberAccess.Write) == 0)
                    {
                        continue;
                    }

                    var fieldsToSkip = i > 0 ? fieldOrder - fieldOrders[i - 1] - 1 : fieldOrder;

                    if (fieldsToSkip > 0)
                    {
                        builder.Append($"for (var i = 0; i < {fieldsToSkip}; i++)");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append("if (!reader.TrySkipField())");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append("return default;");
                        builder.IndentLevel--;
                        builder.Append("}");
                        builder.Append();

                        if (!fieldTypeCheckEmitted)
                        {
                            builder.Append("if (reader.CurrentFieldType != global::Addax.Formats.Tabular.TabularFieldType.Value)");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append("return default;");
                            builder.IndentLevel--;
                            builder.Append("}");

                            fieldTypeCheckEmitted = true;
                        }

                        builder.IndentLevel--;
                        builder.Append("}");
                        builder.Append();
                    }

                    builder.Append("if (!reader.TryReadField())");
                    builder.Append("{");
                    builder.IndentLevel++;
                    builder.Append("return default;");
                    builder.IndentLevel--;
                    builder.Append("}");
                    builder.Append();

                    if (!fieldTypeCheckEmitted)
                    {
                        builder.Append("if (reader.CurrentFieldType != global::Addax.Formats.Tabular.TabularFieldType.Value)");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append("return default;");
                        builder.IndentLevel--;
                        builder.Append("}");
                        builder.Append();

                        fieldTypeCheckEmitted = true;
                    }

                    if (fieldMapping.ConverterTypeName == null)
                    {
                        var valueTypeCode = GetValueTypeCode(fieldMapping.ValueTypeName);

                        builder.Append($"if (reader.TryGet{valueTypeCode}(out var field{fieldOrder}))");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append($"value{fieldOrder} = field{fieldOrder};");
                        builder.IndentLevel--;
                        builder.Append("}");
                    }
                    else
                    {
                        builder.Append($"if (reader.TryGet(_converter{fieldOrder}, out var field{fieldOrder}))");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append($"value{fieldOrder} = field{fieldOrder};");
                        builder.IndentLevel--;
                        builder.Append("}");
                    }

                    builder.Append();
                }

                builder.Append($"var record = new {recordMapping.TypeName}");
                builder.Append("{");
                builder.IndentLevel++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if ((fieldMapping.MemberAccess & TypeMemberAccess.Write) != 0)
                    {
                        builder.Append($"{fieldMapping.MemberName} = value{fieldOrder},");
                    }
                }

                builder.IndentLevel--;
                builder.Append("};");
                builder.Append();
                builder.Append("return new(record);");
                builder.IndentLevel--;
                builder.Append("}");
                builder.Append();
                builder.Append("[global::System.Runtime.CompilerServices.AsyncMethodBuilder(typeof(global::System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder<>))]");
                builder.Append($"public override async global::System.Threading.Tasks.ValueTask<global::Addax.Formats.Tabular.TabularRecord<{recordMapping.TypeName}>> ReadAsync(global::Addax.Formats.Tabular.TabularReader reader, global::System.Threading.CancellationToken cancellationToken)");
                builder.Append("{");
                builder.IndentLevel++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if ((fieldMapping.MemberAccess & TypeMemberAccess.Write) != 0)
                    {
                        if (!fieldMapping.AsNullableT)
                        {
                            builder.Append($"var value{fieldOrder} = default({fieldMapping.ValueTypeName});");
                        }
                        else
                        {
                            builder.Append($"var value{fieldOrder} = default({fieldMapping.ValueTypeName}?);");
                        }
                    }
                }

                builder.Append();

                fieldTypeCheckEmitted = false;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if ((fieldMapping.MemberAccess & TypeMemberAccess.Write) == 0)
                    {
                        continue;
                    }

                    var fieldsToSkip = i > 0 ? fieldOrder - fieldOrders[i - 1] - 1 : fieldOrder;

                    if (fieldsToSkip > 0)
                    {
                        builder.Append($"for (var i = 0; i < {fieldsToSkip}; i++)");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append("if (!await reader.TrySkipFieldAsync(cancellationToken).ConfigureAwait(false))");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append("return default;");
                        builder.IndentLevel--;
                        builder.Append("}");
                        builder.Append();

                        if (!fieldTypeCheckEmitted)
                        {
                            builder.Append("if (reader.CurrentFieldType != global::Addax.Formats.Tabular.TabularFieldType.Value)");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append("return default;");
                            builder.IndentLevel--;
                            builder.Append("}");

                            fieldTypeCheckEmitted = true;
                        }

                        builder.IndentLevel--;
                        builder.Append("}");
                        builder.Append();
                    }

                    builder.Append("if (!await reader.TryReadFieldAsync(cancellationToken).ConfigureAwait(false))");
                    builder.Append("{");
                    builder.IndentLevel++;
                    builder.Append("return default;");
                    builder.IndentLevel--;
                    builder.Append("}");
                    builder.Append();

                    if (!fieldTypeCheckEmitted)
                    {
                        builder.Append("if (reader.CurrentFieldType != global::Addax.Formats.Tabular.TabularFieldType.Value)");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append("return default;");
                        builder.IndentLevel--;
                        builder.Append("}");
                        builder.Append();

                        fieldTypeCheckEmitted = true;
                    }

                    if (fieldMapping.ConverterTypeName == null)
                    {
                        var valueTypeCode = GetValueTypeCode(fieldMapping.ValueTypeName);

                        builder.Append($"if (reader.TryGet{valueTypeCode}(out var field{fieldOrder}))");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append($"value{fieldOrder} = field{fieldOrder};");
                        builder.IndentLevel--;
                        builder.Append("}");
                    }
                    else
                    {
                        builder.Append($"if (reader.TryGet(_converter{fieldOrder}, out var field{fieldOrder}))");
                        builder.Append("{");
                        builder.IndentLevel++;
                        builder.Append($"value{fieldOrder} = field{fieldOrder};");
                        builder.IndentLevel--;
                        builder.Append("}");
                    }

                    builder.Append();
                }

                builder.Append($"var record = new {recordMapping.TypeName}");
                builder.Append("{");
                builder.IndentLevel++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if ((fieldMapping.MemberAccess & TypeMemberAccess.Write) != 0)
                    {
                        builder.Append($"{fieldMapping.MemberName} = value{fieldOrder},");
                    }
                }

                builder.IndentLevel--;
                builder.Append("};");
                builder.Append();
                builder.Append("return new(record);");
                builder.IndentLevel--;
                builder.Append("}");
            }

            if (fieldCountForWriting > 0)
            {
                if (fieldCountForReading > 0)
                {
                    builder.Append();
                }

                builder.Append($"public override void Write(global::Addax.Formats.Tabular.TabularWriter writer, {recordMapping.TypeName} record)");
                builder.Append("{");
                builder.IndentLevel++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if ((fieldMapping.MemberAccess & TypeMemberAccess.Read) == 0)
                    {
                        continue;
                    }

                    if (fieldMapping.ConverterTypeName == null)
                    {
                        var valueTypeCode = GetValueTypeCode(fieldMapping.ValueTypeName);

                        if (fieldMapping.AsNullableT)
                        {
                            builder.Append($"if (record.{fieldMapping.MemberName}.HasValue)");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append($"writer.Write{valueTypeCode}(record.{fieldMapping.MemberName}.Value);");
                            builder.IndentLevel--;
                            builder.Append("}");
                            builder.Append("else");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append("writer.WriteEmpty();");
                            builder.IndentLevel--;
                            builder.Append("}");
                        }
                        else
                        {
                            builder.Append($"writer.Write{valueTypeCode}(record.{fieldMapping.MemberName});");
                        }
                    }
                    else
                    {
                        if (fieldMapping.AsNullableT)
                        {
                            builder.Append($"if (record.{fieldMapping.MemberName}.HasValue)");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append($"writer.Write(record.{fieldMapping.MemberName}.Value, _converter{fieldOrder});");
                            builder.IndentLevel--;
                            builder.Append("}");
                            builder.Append("else");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append("writer.WriteEmpty();");
                            builder.IndentLevel--;
                            builder.Append("}");
                        }
                        else
                        {
                            builder.Append($"writer.Write(record.{fieldMapping.MemberName}, _converter{fieldOrder});");
                        }
                    }

                    if (i < recordMapping.FieldMappings.Count - 1)
                    {
                        builder.Append();
                    }
                }

                builder.IndentLevel--;
                builder.Append("}");
                builder.Append();
                builder.Append("[global::System.Runtime.CompilerServices.AsyncMethodBuilder(typeof(global::System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder))]");
                builder.Append($"public override async global::System.Threading.Tasks.ValueTask WriteAsync(global::Addax.Formats.Tabular.TabularWriter writer, {recordMapping.TypeName} record, global::System.Threading.CancellationToken cancellationToken)");
                builder.Append("{");
                builder.IndentLevel++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if ((fieldMapping.MemberAccess & TypeMemberAccess.Read) == 0)
                    {
                        continue;
                    }

                    if (fieldMapping.ConverterTypeName == null)
                    {
                        var valueTypeCode = GetValueTypeCode(fieldMapping.ValueTypeName);

                        if (fieldMapping.AsNullableT)
                        {
                            builder.Append($"if (record.{fieldMapping.MemberName}.HasValue)");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append($"await writer.Write{valueTypeCode}Async(record.{fieldMapping.MemberName}.Value, cancellationToken).ConfigureAwait(false);");
                            builder.IndentLevel--;
                            builder.Append("}");
                            builder.Append("else");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append("await writer.WriteEmptyAsync(cancellationToken).ConfigureAwait(false);");
                            builder.IndentLevel--;
                            builder.Append("}");
                        }
                        else
                        {
                            builder.Append($"await writer.Write{valueTypeCode}Async(record.{fieldMapping.MemberName}, cancellationToken).ConfigureAwait(false);");
                        }
                    }
                    else
                    {
                        if (fieldMapping.AsNullableT)
                        {
                            builder.Append($"if (record.{fieldMapping.MemberName}.HasValue)");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append($"await writer.WriteAsync(record.{fieldMapping.MemberName}.Value, _converter{fieldOrder}, cancellationToken).ConfigureAwait(false);");
                            builder.IndentLevel--;
                            builder.Append("}");
                            builder.Append("else");
                            builder.Append("{");
                            builder.IndentLevel++;
                            builder.Append("await writer.WriteEmptyAsync(cancellationToken).ConfigureAwait(false);");
                            builder.IndentLevel--;
                            builder.Append("}");
                        }
                        else
                        {
                            builder.Append($"await writer.WriteAsync(record.{fieldMapping.MemberName}, _converter{fieldOrder}, cancellationToken).ConfigureAwait(false);");
                        }
                    }

                    if (i < recordMapping.FieldMappings.Count - 1)
                    {
                        builder.Append();
                    }
                }

                builder.IndentLevel--;
                builder.Append("}");
            }

            if (recordTypeHasHeader)
            {
                builder.Append();
                builder.Append("public override global::System.Collections.Generic.IEnumerable<global::System.String> Header");
                builder.Append("{");
                builder.IndentLevel++;
                builder.Append("get");
                builder.Append("{");
                builder.IndentLevel++;
                builder.Append("return s_header;");
                builder.IndentLevel--;
                builder.Append("}");
                builder.IndentLevel--;
                builder.Append("}");
            }

            builder.IndentLevel--;
            builder.Append("}");
        }
    }
}
