// (c) Oleksandr Kozlenko. Licensed under the MIT license.

namespace Addax.Formats.Tabular.Analyzers.CSharp
{
    internal partial class TabularHandlerEmitter
    {
        private static void BuildRegistryInitializerSource(SourceTextWriter writer, string typeName, int handlerCount)
        {
            writer.WriteLine("// <auto-generated />");
            writer.WriteLine();
            writer.WriteLine("namespace Addax.Formats.Tabular.Handlers;");
            writer.WriteLine();
            writer.WriteLine($"[global::System.CodeDom.Compiler.GeneratedCode(\"{s_assemblyInfo.Name}\", \"{s_assemblyInfo.Version}\")]");
            writer.WriteLine($"file static class {typeName}");
            writer.WriteLine("{");
            writer.Indent++;
            writer.WriteLine("[global::System.Runtime.CompilerServices.ModuleInitializer]");
            writer.WriteLine("public static void Initialize()");
            writer.WriteLine("{");
            writer.Indent++;

            for (var i = 0; i < handlerCount; i++)
            {
                writer.WriteLine($"RegisterHandler(new global::Addax.Formats.Tabular.Handlers.Handler{i}());");
            }

            writer.Indent--;
            writer.WriteLine("}");
            writer.WriteLine();
            writer.WriteLine("private static void RegisterHandler<T>(global::Addax.Formats.Tabular.TabularHandler<T> handler)");
            writer.Indent++;
            writer.WriteLine("where T : notnull");
            writer.Indent--;
            writer.WriteLine("{");
            writer.Indent++;
            writer.WriteLine("global::Addax.Formats.Tabular.TabularRegistry.Handlers[typeof(T)] = handler;");
            writer.Indent--;
            writer.WriteLine("}");
            writer.Indent--;
            writer.WriteLine("}");
        }

        private static void BuildHandlerSource(SourceTextWriter writer, string typeName, in TabularRecordMapping recordMapping)
        {
            var recordMappingSupportsHeader = MappingSupportsHeader(recordMapping);
            var recordMappingSupportsReading = MappingSupportsReading(recordMapping);
            var recordMappingSupportsWriting = MappingSupportsWriting(recordMapping);
            var recordMappingHasConverters = MappingHasConverters(recordMapping);
            var fieldOrders = GetDictionaryKeysOrdered(recordMapping.FieldMappings);

            writer.WriteLine("// <auto-generated />");
            writer.WriteLine();
            writer.WriteLine("#nullable disable");
            writer.WriteLine();
            writer.WriteLine("namespace Addax.Formats.Tabular.Handlers;");
            writer.WriteLine();
            writer.WriteLine($"[global::System.CodeDom.Compiler.GeneratedCode(\"{s_assemblyInfo.Name}\", \"{s_assemblyInfo.Version}\")]");
            writer.WriteLine($"internal sealed class {typeName} : global::Addax.Formats.Tabular.TabularHandler<{recordMapping.TypeName}>");
            writer.WriteLine("{");
            writer.Indent++;

            if (recordMappingSupportsHeader)
            {
                writer.WriteLine("private static readonly global::System.String[] s_header =");
                writer.WriteLine("[");
                writer.Indent++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (fieldMapping.FieldNameLiteral.HasValue)
                    {
                        writer.WriteLine($"{fieldMapping.FieldNameLiteral.Value.Text},");
                    }
                    else
                    {
                        writer.WriteLine("\"\",");
                    }
                }

                writer.Indent--;
                writer.WriteLine("];");
                writer.WriteLine();
            }

            if (recordMappingHasConverters)
            {
                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (fieldMapping.ConverterTypeName != null)
                    {
                        writer.WriteLine($"private readonly {fieldMapping.ConverterTypeName} _c{fieldOrder} = new();");
                    }
                }

                writer.WriteLine();
            }

            if (recordMappingSupportsReading)
            {
                writer.WriteLine($"public override global::Addax.Formats.Tabular.TabularRecord<{recordMapping.TypeName}> Read(global::Addax.Formats.Tabular.TabularReader reader)");
                writer.WriteLine("{");
                writer.Indent++;

                var fieldTypeCheckEmitted = false;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (!fieldMapping.SupportsWriting)
                    {
                        continue;
                    }

                    var fieldsToSkip = i > 0 ? fieldOrder - fieldOrders[i - 1] - 1 : fieldOrder;

                    if (fieldsToSkip > 0)
                    {
                        for (var j = 0; j < fieldsToSkip; j++)
                        {
                            if (fieldTypeCheckEmitted)
                            {
                                writer.WriteLine("if (!reader.TrySkipField())");
                            }
                            else
                            {
                                writer.WriteLine("if (!reader.TrySkipField() || (reader.CurrentFieldType != global::Addax.Formats.Tabular.TabularFieldType.Value))");

                                fieldTypeCheckEmitted = true;
                            }

                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine("return default;");
                            writer.Indent--;
                            writer.WriteLine("}");
                            writer.WriteLine();
                        }
                    }

                    if (fieldTypeCheckEmitted)
                    {
                        writer.WriteLine("if (!reader.TryReadField())");
                    }
                    else
                    {
                        writer.WriteLine("if (!reader.TryReadField() || (reader.CurrentFieldType != global::Addax.Formats.Tabular.TabularFieldType.Value))");

                        fieldTypeCheckEmitted = true;
                    }

                    writer.WriteLine("{");
                    writer.Indent++;
                    writer.WriteLine("return default;");
                    writer.Indent--;
                    writer.WriteLine("}");
                    writer.WriteLine();

                    var defaultValue = !fieldMapping.IsNullableT ? "default" : $"default({fieldMapping.ValueTypeName}?)";

                    if (fieldMapping.ConverterTypeName == null)
                    {
                        var valueTypeCode = GetValueTypeCode(fieldMapping.ValueTypeName);

                        writer.WriteLine($"var v{fieldOrder} = reader.TryGet{valueTypeCode}(out var f{fieldOrder}) ? f{fieldOrder} : {defaultValue};");
                    }
                    else
                    {
                        writer.WriteLine($"var v{fieldOrder} = reader.TryGet(_c{fieldOrder}, out var f{fieldOrder}) ? f{fieldOrder} : {defaultValue};");
                    }

                    writer.WriteLine();
                }

                writer.WriteLine($"var r = new {recordMapping.TypeName}");
                writer.WriteLine("{");
                writer.Indent++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (fieldMapping.SupportsWriting)
                    {
                        writer.WriteLine($"{fieldMapping.MemberName} = v{fieldOrder},");
                    }
                }

                writer.Indent--;
                writer.WriteLine("};");
                writer.WriteLine();
                writer.WriteLine("return new(r);");
                writer.Indent--;
                writer.WriteLine("}");
                writer.WriteLine();
                writer.WriteLine("[global::System.Runtime.CompilerServices.AsyncMethodBuilder(typeof(global::System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder<>))]");
                writer.WriteLine($"public override async global::System.Threading.Tasks.ValueTask<global::Addax.Formats.Tabular.TabularRecord<{recordMapping.TypeName}>> ReadAsync(global::Addax.Formats.Tabular.TabularReader reader, global::System.Threading.CancellationToken cancellationToken)");
                writer.WriteLine("{");
                writer.Indent++;

                fieldTypeCheckEmitted = false;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (!fieldMapping.SupportsWriting)
                    {
                        continue;
                    }

                    var fieldsToSkip = i > 0 ? fieldOrder - fieldOrders[i - 1] - 1 : fieldOrder;

                    if (fieldsToSkip > 0)
                    {
                        for (var j = 0; j < fieldsToSkip; j++)
                        {
                            if (fieldTypeCheckEmitted)
                            {
                                writer.WriteLine("if (!await reader.TrySkipFieldAsync(cancellationToken).ConfigureAwait(false))");
                            }
                            else
                            {
                                writer.WriteLine("if (!await reader.TrySkipFieldAsync(cancellationToken).ConfigureAwait(false) || (reader.CurrentFieldType != global::Addax.Formats.Tabular.TabularFieldType.Value))");

                                fieldTypeCheckEmitted = true;
                            }

                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine("return default;");
                            writer.Indent--;
                            writer.WriteLine("}");
                            writer.WriteLine();
                        }
                    }

                    if (fieldTypeCheckEmitted)
                    {
                        writer.WriteLine("if (!await reader.TryReadFieldAsync(cancellationToken).ConfigureAwait(false))");
                    }
                    else
                    {
                        writer.WriteLine("if (!await reader.TryReadFieldAsync(cancellationToken).ConfigureAwait(false) || (reader.CurrentFieldType != global::Addax.Formats.Tabular.TabularFieldType.Value))");

                        fieldTypeCheckEmitted = true;
                    }

                    writer.WriteLine("{");
                    writer.Indent++;
                    writer.WriteLine("return default;");
                    writer.Indent--;
                    writer.WriteLine("}");
                    writer.WriteLine();

                    var defaultValue = !fieldMapping.IsNullableT ? "default" : $"default({fieldMapping.ValueTypeName}?)";

                    if (fieldMapping.ConverterTypeName == null)
                    {
                        var valueTypeCode = GetValueTypeCode(fieldMapping.ValueTypeName);

                        writer.WriteLine($"var v{fieldOrder} = reader.TryGet{valueTypeCode}(out var f{fieldOrder}) ? f{fieldOrder} : {defaultValue};");
                    }
                    else
                    {
                        writer.WriteLine($"var v{fieldOrder} = reader.TryGet(_c{fieldOrder}, out var f{fieldOrder}) ? f{fieldOrder} : {defaultValue};");
                    }

                    writer.WriteLine();
                }

                writer.WriteLine($"var r = new {recordMapping.TypeName}");
                writer.WriteLine("{");
                writer.Indent++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (fieldMapping.SupportsWriting)
                    {
                        writer.WriteLine($"{fieldMapping.MemberName} = v{fieldOrder},");
                    }
                }

                writer.Indent--;
                writer.WriteLine("};");
                writer.WriteLine();
                writer.WriteLine("return new(r);");
                writer.Indent--;
                writer.WriteLine("}");
            }

            if (recordMappingSupportsWriting)
            {
                if (recordMappingSupportsReading)
                {
                    writer.WriteLine();
                }

                writer.WriteLine($"public override void Write(global::Addax.Formats.Tabular.TabularWriter writer, {recordMapping.TypeName} record)");
                writer.WriteLine("{");
                writer.Indent++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (!fieldMapping.SupportsReading)
                    {
                        continue;
                    }

                    var fieldsToSkip = i > 0 ? fieldOrder - fieldOrders[i - 1] - 1 : fieldOrder;

                    if (fieldsToSkip > 0)
                    {
                        for (var j = 0; j < fieldsToSkip; j++)
                        {
                            writer.WriteLine("writer.WriteEmpty();");
                            writer.WriteLine();
                        }
                    }

                    if (fieldMapping.ConverterTypeName == null)
                    {
                        var valueTypeCode = GetValueTypeCode(fieldMapping.ValueTypeName);

                        if (fieldMapping.IsNullableT)
                        {
                            writer.WriteLine($"if (record.{fieldMapping.MemberName}.HasValue)");
                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine($"writer.Write{valueTypeCode}(record.{fieldMapping.MemberName}.Value);");
                            writer.Indent--;
                            writer.WriteLine("}");
                            writer.WriteLine("else");
                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine("writer.WriteEmpty();");
                            writer.Indent--;
                            writer.WriteLine("}");
                        }
                        else
                        {
                            writer.WriteLine($"writer.Write{valueTypeCode}(record.{fieldMapping.MemberName});");
                        }
                    }
                    else
                    {
                        if (fieldMapping.IsNullableT)
                        {
                            writer.WriteLine($"if (record.{fieldMapping.MemberName}.HasValue)");
                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine($"writer.Write(record.{fieldMapping.MemberName}.Value, _c{fieldOrder});");
                            writer.Indent--;
                            writer.WriteLine("}");
                            writer.WriteLine("else");
                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine("writer.WriteEmpty();");
                            writer.Indent--;
                            writer.WriteLine("}");
                        }
                        else
                        {
                            writer.WriteLine($"writer.Write(record.{fieldMapping.MemberName}, _c{fieldOrder});");
                        }
                    }

                    if (i < recordMapping.FieldMappings.Count - 1)
                    {
                        writer.WriteLine();
                    }
                }

                writer.Indent--;
                writer.WriteLine("}");
                writer.WriteLine();
                writer.WriteLine("[global::System.Runtime.CompilerServices.AsyncMethodBuilder(typeof(global::System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder))]");
                writer.WriteLine($"public override async global::System.Threading.Tasks.ValueTask WriteAsync(global::Addax.Formats.Tabular.TabularWriter writer, {recordMapping.TypeName} record, global::System.Threading.CancellationToken cancellationToken)");
                writer.WriteLine("{");
                writer.Indent++;

                for (var i = 0; i < fieldOrders.Length; i++)
                {
                    var fieldOrder = fieldOrders[i];
                    var fieldMapping = recordMapping.FieldMappings[fieldOrder];

                    if (!fieldMapping.SupportsReading)
                    {
                        continue;
                    }

                    var fieldsToSkip = i > 0 ? fieldOrder - fieldOrders[i - 1] - 1 : fieldOrder;

                    if (fieldsToSkip > 0)
                    {
                        for (var j = 0; j < fieldsToSkip; j++)
                        {
                            writer.WriteLine("await writer.WriteEmptyAsync(cancellationToken).ConfigureAwait(false);");
                            writer.WriteLine();
                        }
                    }

                    if (fieldMapping.ConverterTypeName == null)
                    {
                        var valueTypeCode = GetValueTypeCode(fieldMapping.ValueTypeName);

                        if (fieldMapping.IsNullableT)
                        {
                            writer.WriteLine($"if (record.{fieldMapping.MemberName}.HasValue)");
                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine($"await writer.Write{valueTypeCode}Async(record.{fieldMapping.MemberName}.Value, cancellationToken).ConfigureAwait(false);");
                            writer.Indent--;
                            writer.WriteLine("}");
                            writer.WriteLine("else");
                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine("await writer.WriteEmptyAsync(cancellationToken).ConfigureAwait(false);");
                            writer.Indent--;
                            writer.WriteLine("}");
                        }
                        else
                        {
                            writer.WriteLine($"await writer.Write{valueTypeCode}Async(record.{fieldMapping.MemberName}, cancellationToken).ConfigureAwait(false);");
                        }
                    }
                    else
                    {
                        if (fieldMapping.IsNullableT)
                        {
                            writer.WriteLine($"if (record.{fieldMapping.MemberName}.HasValue)");
                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine($"await writer.WriteAsync(record.{fieldMapping.MemberName}.Value, _c{fieldOrder}, cancellationToken).ConfigureAwait(false);");
                            writer.Indent--;
                            writer.WriteLine("}");
                            writer.WriteLine("else");
                            writer.WriteLine("{");
                            writer.Indent++;
                            writer.WriteLine("await writer.WriteEmptyAsync(cancellationToken).ConfigureAwait(false);");
                            writer.Indent--;
                            writer.WriteLine("}");
                        }
                        else
                        {
                            writer.WriteLine($"await writer.WriteAsync(record.{fieldMapping.MemberName}, _c{fieldOrder}, cancellationToken).ConfigureAwait(false);");
                        }
                    }

                    if (i < recordMapping.FieldMappings.Count - 1)
                    {
                        writer.WriteLine();
                    }
                }

                writer.Indent--;
                writer.WriteLine("}");
            }

            if (recordMappingSupportsHeader)
            {
                writer.WriteLine();
                writer.WriteLine("public override global::System.Collections.Generic.IEnumerable<global::System.String> Header");
                writer.WriteLine("{");
                writer.Indent++;
                writer.WriteLine("get");
                writer.WriteLine("{");
                writer.Indent++;
                writer.WriteLine("return s_header;");
                writer.Indent--;
                writer.WriteLine("}");
                writer.Indent--;
                writer.WriteLine("}");
            }

            writer.Indent--;
            writer.WriteLine("}");
        }
    }
}
