// (c) Oleksandr Kozlenko. Licensed under the MIT license.

using System.Text;

namespace Addax.Formats.Tabular.Analyzers;

public partial class TabularConverterGenerator
{
    private sealed partial class Emitter
    {
        private static void BuildModuleInitializerSource(StringBuilder builder, int converterCount, CancellationToken cancellationToken)
        {
            builder.AppendLine("// <auto-generated />");
            builder.AppendLine();
            builder.AppendLine("using Tabular = global::Addax.Formats.Tabular;");
            builder.AppendLine();
            builder.AppendLine("namespace Addax.Formats.Tabular.Converters;");
            builder.AppendLine();
            builder.AppendLine($"[global::System.CodeDom.Compiler.GeneratedCode(\"{_assemblyName.Name}\", \"{_assemblyName.Version}\")]");
            builder.AppendLine("file static class ModuleInitializer");
            builder.AppendLine("{");
            builder.AppendLine("    [global::System.Runtime.CompilerServices.ModuleInitializer]");
            builder.AppendLine("    public static void Initialize()");
            builder.AppendLine("    {");

            for (var i = 0; i < converterCount; i++)
            {
                cancellationToken.ThrowIfCancellationRequested();

                builder.AppendLine($"        TryAddTabularRecordConverter<Tabular::Converters.GeneratedRecordConverter{i}>();");
            }

            builder.AppendLine("    }");
            builder.AppendLine();
            builder.AppendLine("    private static void TryAddTabularRecordConverter<T>()");
            builder.AppendLine("        where T : Tabular::TabularRecordConverter, new()");
            builder.AppendLine("    {");
            builder.AppendLine("        var converter = new T();");
            builder.AppendLine();
            builder.AppendLine("        Tabular::TabularRecordConverterRegistry.Shared.TryAdd(converter.RecordType, converter);");
            builder.AppendLine("    }");
            builder.AppendLine("}");
        }

        private static void BuildRecordConverterSource(StringBuilder builder, in TabularRecordSpec typeSpec, int converterIndex, CancellationToken cancellationToken)
        {
            var typeSupportsReading = TypeSupportsReadingFields(typeSpec);
            var typeSupportsWriting = TypeSupportsWritingFields(typeSpec);

            var fieldIndices = typeSpec.FieldSpecs.Keys.OrderBy(static x => x).ToArray();

            builder.AppendLine("// <auto-generated />");
            builder.AppendLine();
            builder.AppendLine("using Tabular = global::Addax.Formats.Tabular;");
            builder.AppendLine();
            builder.AppendLine("namespace Addax.Formats.Tabular.Converters;");
            builder.AppendLine();
            builder.AppendLine($"[global::System.CodeDom.Compiler.GeneratedCode(\"{_assemblyName.Name}\", \"{_assemblyName.Version}\")]");
            builder.AppendLine($"internal sealed class GeneratedRecordConverter{converterIndex} : Tabular::TabularRecordConverter<{typeSpec.TypeName}>");
            builder.AppendLine("{");

            if (typeSupportsReading)
            {
                builder.AppendLine("    [global::System.Runtime.CompilerServices.AsyncMethodBuilder(typeof(global::System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder<>))]");
                builder.AppendLine($"    public override async global::System.Threading.Tasks.ValueTask<Tabular::TabularRecord<{typeSpec.TypeName}>> ReadRecordAsync(Tabular::TabularFieldReader reader, Tabular::TabularRecordReaderContext context, global::System.Threading.CancellationToken cancellationToken)");
                builder.AppendLine("    {");

                for (var i = 0; i < fieldIndices.Length; i++)
                {
                    cancellationToken.ThrowIfCancellationRequested();

                    var fieldIndex = fieldIndices[i];
                    var fieldSpec = typeSpec.FieldSpecs[fieldIndex];

                    if (!fieldSpec.TypeMemberAccessTypes.HasFlag(TypeMemberAccessTypes.Write))
                    {
                        continue;
                    }

                    var typeString = GetTypeMemberTypeString(fieldSpec.FieldType);

                    if (!fieldSpec.TypeMemberIsNullable)
                    {
                        builder.AppendLine($"        var value{fieldIndex} = default({typeString});");
                    }
                    else
                    {
                        builder.AppendLine($"        var value{fieldIndex} = default({typeString}?);");
                    }
                }

                builder.AppendLine();

                var commentCheckEmitted = false;

                for (var i = 0; i < fieldIndices.Length; i++)
                {
                    cancellationToken.ThrowIfCancellationRequested();

                    var fieldIndex = fieldIndices[i];
                    var fieldSpec = typeSpec.FieldSpecs[fieldIndex];

                    if (!fieldSpec.TypeMemberAccessTypes.HasFlag(TypeMemberAccessTypes.Write))
                    {
                        continue;
                    }

                    var typeCode = GetTypeMemberTypeCode(fieldSpec.FieldType);
                    var fieldsToSkip = i != 0 ? fieldIndex - fieldIndices[i - 1] - 1 : fieldIndex;

                    if (fieldsToSkip > 0)
                    {
                        builder.AppendLine($"        for (var i = 0; i < {fieldsToSkip}; i++)");
                        builder.AppendLine("        {");
                        builder.AppendLine("            if (!await reader.MoveNextFieldAsync(cancellationToken).ConfigureAwait(false))");
                        builder.AppendLine("            {");

                        if (!typeSpec.IsStrict)
                        {
                            builder.AppendLine($"                return Tabular::TabularRecord<{typeSpec.TypeName}>.AsContent(new()");
                            builder.AppendLine("                {");

                            for (var j = 0; j < i; j++)
                            {
                                cancellationToken.ThrowIfCancellationRequested();

                                var fieldIndexInner = fieldIndices[j];
                                var fieldSpecInner = typeSpec.FieldSpecs[fieldIndexInner];

                                if (!fieldSpecInner.TypeMemberAccessTypes.HasFlag(TypeMemberAccessTypes.Write))
                                {
                                    continue;
                                }

                                builder.AppendLine($"                    {fieldSpecInner.TypeMemberName} = value{fieldIndexInner},");
                            }

                            builder.AppendLine("                });");
                        }
                        else
                        {
                            builder.AppendLine($"                throw new Tabular::TabularDataException(\"Unable to move to a field at index {fieldIndex}.\", reader.Position);");
                        }

                        builder.AppendLine("            }");
                        builder.AppendLine();

                        if (!commentCheckEmitted)
                        {
                            builder.AppendLine("            if (reader.FieldType is Tabular::TabularFieldType.Comment)");
                            builder.AppendLine("            {");
                            builder.AppendLine($"                return Tabular::TabularRecord<{typeSpec.TypeName}>.AsComment(context.ConsumeComments ? reader.GetString() : null);");
                            builder.AppendLine("            }");

                            commentCheckEmitted = true;
                        }

                        builder.AppendLine("        }");
                        builder.AppendLine();
                    }

                    builder.AppendLine("        if (!await reader.ReadFieldAsync(cancellationToken).ConfigureAwait(false))");
                    builder.AppendLine("        {");

                    if (!typeSpec.IsStrict)
                    {
                        builder.AppendLine($"            return Tabular::TabularRecord<{typeSpec.TypeName}>.AsContent(new()");
                        builder.AppendLine("            {");

                        for (var j = 0; j < i; j++)
                        {
                            cancellationToken.ThrowIfCancellationRequested();

                            var fieldIndexInner = fieldIndices[j];
                            var fieldSpecInner = typeSpec.FieldSpecs[fieldIndexInner];

                            if (!fieldSpecInner.TypeMemberAccessTypes.HasFlag(TypeMemberAccessTypes.Write))
                            {
                                continue;
                            }

                            builder.AppendLine($"                {fieldSpecInner.TypeMemberName} = value{fieldIndexInner},");
                        }

                        builder.AppendLine("            });");
                    }
                    else
                    {
                        builder.AppendLine($"            throw new Tabular::TabularDataException(\"Unable to read a field at index {fieldIndex}.\", reader.Position);");
                    }

                    builder.AppendLine("        }");
                    builder.AppendLine();

                    if (!commentCheckEmitted)
                    {
                        builder.AppendLine("        if (reader.FieldType is Tabular::TabularFieldType.Comment)");
                        builder.AppendLine("        {");
                        builder.AppendLine($"            return Tabular::TabularRecord<{typeSpec.TypeName}>.AsComment(context.ConsumeComments ? reader.GetString() : null);");
                        builder.AppendLine("        }");
                        builder.AppendLine();

                        commentCheckEmitted = true;
                    }

                    if (!typeSpec.IsStrict)
                    {
                        if (!fieldSpec.TypeMemberIsNullable)
                        {
                            builder.AppendLine($"        if (reader.TryGet{typeCode}(out var field{fieldIndex}))");
                            builder.AppendLine("        {");
                            builder.AppendLine($"            value{fieldIndex} = field{fieldIndex};");
                            builder.AppendLine("        }");
                            builder.AppendLine();
                        }
                        else
                        {
                            builder.AppendLine("        if (!reader.Value.IsEmpty)");
                            builder.AppendLine("        {");
                            builder.AppendLine($"            if (reader.TryGet{typeCode}(out var field{fieldIndex}))");
                            builder.AppendLine("            {");
                            builder.AppendLine($"                value{fieldIndex} = field{fieldIndex};");
                            builder.AppendLine("            }");
                            builder.AppendLine("        }");
                            builder.AppendLine();
                        }
                    }
                    else
                    {
                        var typeString = GetTypeMemberTypeString(fieldSpec.FieldType);

                        if (!fieldSpec.TypeMemberIsNullable)
                        {
                            builder.AppendLine($"        if (reader.TryGet{typeCode}(out var field{fieldIndex}))");
                            builder.AppendLine("        {");
                            builder.AppendLine($"            value{fieldIndex} = field{fieldIndex};");
                            builder.AppendLine("        }");
                            builder.AppendLine("        else");
                            builder.AppendLine("        {");
                            builder.AppendLine($"            throw new Tabular::TabularDataException($\"Unable to get a value at index {fieldIndex} of type '{{typeof({typeString})}}'.\", reader.Position);");
                            builder.AppendLine("        }");
                            builder.AppendLine();
                        }
                        else
                        {
                            builder.AppendLine("        if (!reader.Value.IsEmpty)");
                            builder.AppendLine("        {");
                            builder.AppendLine($"            if (reader.TryGet{typeCode}(out var field{fieldIndex}))");
                            builder.AppendLine("            {");
                            builder.AppendLine($"                value{fieldIndex} = field{fieldIndex};");
                            builder.AppendLine("            }");
                            builder.AppendLine("            else");
                            builder.AppendLine("            {");
                            builder.AppendLine($"                throw new Tabular::TabularDataException($\"Unable to get a value at index {fieldIndex} of type '{{typeof({typeString})}}'.\", reader.Position);");
                            builder.AppendLine("            }");
                            builder.AppendLine("        }");
                            builder.AppendLine();
                        }
                    }
                }

                builder.AppendLine($"        return Tabular::TabularRecord<{typeSpec.TypeName}>.AsContent(new()");
                builder.AppendLine("        {");

                for (var i = 0; i < fieldIndices.Length; i++)
                {
                    cancellationToken.ThrowIfCancellationRequested();

                    var fieldIndex = fieldIndices[i];
                    var fieldSpec = typeSpec.FieldSpecs[fieldIndex];

                    if (!fieldSpec.TypeMemberAccessTypes.HasFlag(TypeMemberAccessTypes.Write))
                    {
                        continue;
                    }

                    builder.AppendLine($"            {fieldSpec.TypeMemberName} = value{fieldIndex},");
                }

                builder.AppendLine("        });");
                builder.AppendLine("    }");
            }

            if (typeSupportsWriting)
            {
                if (typeSupportsReading)
                {
                    builder.AppendLine();
                }

                builder.AppendLine("    [global::System.Runtime.CompilerServices.AsyncMethodBuilder(typeof(global::System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder))]");
                builder.AppendLine($"    public override async global::System.Threading.Tasks.ValueTask WriteRecordAsync(Tabular::TabularFieldWriter writer, {typeSpec.TypeName} record, global::System.Threading.CancellationToken cancellationToken)");
                builder.AppendLine("    {");

                for (var i = 0; i < fieldIndices.Length; i++)
                {
                    cancellationToken.ThrowIfCancellationRequested();

                    var fieldIndex = fieldIndices[i];
                    var fieldSpec = typeSpec.FieldSpecs[fieldIndex];

                    if (!fieldSpec.TypeMemberAccessTypes.HasFlag(TypeMemberAccessTypes.Read))
                    {
                        continue;
                    }

                    var typeCode = GetTypeMemberTypeCode(fieldSpec.FieldType);

                    if (!fieldSpec.TypeMemberIsNullable)
                    {
                        builder.AppendLine($"        writer.Write{typeCode}(record.{fieldSpec.TypeMemberName});");
                    }
                    else
                    {
                        builder.AppendLine($"        if (record.{fieldSpec.TypeMemberName} is null)");
                        builder.AppendLine("        {");
                        builder.AppendLine("            writer.WriteString(null);");
                        builder.AppendLine("        }");
                        builder.AppendLine("        else");
                        builder.AppendLine("        {");
                        builder.AppendLine($"            writer.Write{typeCode}(record.{fieldSpec.TypeMemberName}.Value);");
                        builder.AppendLine("        }");
                    }

                    builder.AppendLine();
                    builder.AppendLine("        await writer.FlushAsync(cancellationToken).ConfigureAwait(false);");

                    if (i != typeSpec.FieldSpecs.Count - 1)
                    {
                        builder.AppendLine();
                    }
                }

                builder.AppendLine("    }");
            }

            builder.AppendLine("}");
        }
    }
}
